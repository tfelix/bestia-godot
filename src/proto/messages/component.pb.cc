// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/component.proto

#include "messages/component.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_messages_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_messages_2fmodel_2eproto;
namespace bestia {
namespace messages {
class ComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component> _instance;
} _Component_default_instance_;
class PositionComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionComponent> _instance;
} _PositionComponent_default_instance_;
class TemperatureComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemperatureComponent> _instance;
} _TemperatureComponent_default_instance_;
class VisualComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualComponent> _instance;
} _VisualComponent_default_instance_;
class StatusComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusComponent> _instance;
} _StatusComponent_default_instance_;
}  // namespace messages
}  // namespace bestia
static void InitDefaultsscc_info_Component_messages_2fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_Component_default_instance_;
    new (ptr) ::bestia::messages::Component();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::Component::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_messages_2fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Component_messages_2fcomponent_2eproto}, {}};

static void InitDefaultsscc_info_PositionComponent_messages_2fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_PositionComponent_default_instance_;
    new (ptr) ::bestia::messages::PositionComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::PositionComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionComponent_messages_2fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PositionComponent_messages_2fcomponent_2eproto}, {
      &scc_info_Component_messages_2fcomponent_2eproto.base,
      &scc_info_Vec3_messages_2fmodel_2eproto.base,}};

static void InitDefaultsscc_info_StatusComponent_messages_2fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_StatusComponent_default_instance_;
    new (ptr) ::bestia::messages::StatusComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::StatusComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusComponent_messages_2fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusComponent_messages_2fcomponent_2eproto}, {
      &scc_info_Component_messages_2fcomponent_2eproto.base,}};

static void InitDefaultsscc_info_TemperatureComponent_messages_2fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_TemperatureComponent_default_instance_;
    new (ptr) ::bestia::messages::TemperatureComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::TemperatureComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TemperatureComponent_messages_2fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TemperatureComponent_messages_2fcomponent_2eproto}, {
      &scc_info_Component_messages_2fcomponent_2eproto.base,}};

static void InitDefaultsscc_info_VisualComponent_messages_2fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_VisualComponent_default_instance_;
    new (ptr) ::bestia::messages::VisualComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::VisualComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisualComponent_messages_2fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisualComponent_messages_2fcomponent_2eproto}, {
      &scc_info_Component_messages_2fcomponent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2fcomponent_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2fcomponent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2fcomponent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2fcomponent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Component, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Component, component_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PositionComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PositionComponent, component_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PositionComponent, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::TemperatureComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::TemperatureComponent, component_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::TemperatureComponent, max_tolerable_temp_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::TemperatureComponent, min_tolerable_temp_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::TemperatureComponent, current_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::VisualComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::VisualComponent, component_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::VisualComponent, visual_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, component_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, physical_defense_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, magic_defense_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, strength_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, vitality_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, intelligence_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, agility_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, willpower_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, dexterity_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, hp_regen_rate_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, mana_regen_rate_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, stamina_regen_rate_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, critical_hitrate_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, dodge_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, casttime_mod_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, cooldown_mod_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, spell_duration_mod_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, hitrate_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, attack_speed_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, walkspeed_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::StatusComponent, element_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bestia::messages::Component)},
  { 7, -1, sizeof(::bestia::messages::PositionComponent)},
  { 14, -1, sizeof(::bestia::messages::TemperatureComponent)},
  { 23, -1, sizeof(::bestia::messages::VisualComponent)},
  { 30, -1, sizeof(::bestia::messages::StatusComponent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_PositionComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_TemperatureComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_VisualComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_StatusComponent_default_instance_),
};

const char descriptor_table_protodef_messages_2fcomponent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030messages/component.proto\022\017bestia.messa"
  "ges\032\024messages/model.proto\"4\n\tComponent\022\021"
  "\n\tentity_id\030\001 \001(\003\022\024\n\014component_id\030\002 \001(\003\""
  "k\n\021PositionComponent\022-\n\tcomponent\030\001 \001(\0132"
  "\032.bestia.messages.Component\022\'\n\010position\030"
  "\002 \001(\0132\025.bestia.messages.Vec3\"\223\001\n\024Tempera"
  "tureComponent\022-\n\tcomponent\030\001 \001(\0132\032.besti"
  "a.messages.Component\022\032\n\022max_tolerable_te"
  "mp\030\002 \001(\005\022\032\n\022min_tolerable_temp\030\003 \001(\005\022\024\n\014"
  "current_temp\030\004 \001(\005\"P\n\017VisualComponent\022-\n"
  "\tcomponent\030\001 \001(\0132\032.bestia.messages.Compo"
  "nent\022\016\n\006visual\030\002 \001(\t\"\204\004\n\017StatusComponent"
  "\022-\n\tcomponent\030\001 \001(\0132\032.bestia.messages.Co"
  "mponent\022\030\n\020physical_defense\030\002 \001(\005\022\025\n\rmag"
  "ic_defense\030\003 \001(\005\022\020\n\010strength\030\004 \001(\005\022\020\n\010vi"
  "tality\030\005 \001(\005\022\024\n\014intelligence\030\006 \001(\005\022\017\n\007ag"
  "ility\030\007 \001(\005\022\021\n\twillpower\030\010 \001(\005\022\021\n\tdexter"
  "ity\030\t \001(\005\022\025\n\rhp_regen_rate\030\n \001(\002\022\027\n\017mana"
  "_regen_rate\030\013 \001(\002\022\032\n\022stamina_regen_rate\030"
  "\014 \001(\002\022\030\n\020critical_hitrate\030\r \001(\002\022\r\n\005dodge"
  "\030\016 \001(\002\022\024\n\014casttime_mod\030\017 \001(\002\022\024\n\014cooldown"
  "_mod\030\020 \001(\002\022\032\n\022spell_duration_mod\030\021 \001(\002\022\017"
  "\n\007hitrate\030\022 \001(\002\022\024\n\014attack_speed\030\023 \001(\002\022\021\n"
  "\twalkspeed\030\024 \001(\002\022)\n\007element\030\025 \001(\0162\030.best"
  "ia.messages.ElementB,\n\031net.bestia.messag"
  "es.protoB\017ComponentProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2fcomponent_2eproto_deps[1] = {
  &::descriptor_table_messages_2fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2fcomponent_2eproto_sccs[5] = {
  &scc_info_Component_messages_2fcomponent_2eproto.base,
  &scc_info_PositionComponent_messages_2fcomponent_2eproto.base,
  &scc_info_StatusComponent_messages_2fcomponent_2eproto.base,
  &scc_info_TemperatureComponent_messages_2fcomponent_2eproto.base,
  &scc_info_VisualComponent_messages_2fcomponent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2fcomponent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fcomponent_2eproto = {
  false, false, descriptor_table_protodef_messages_2fcomponent_2eproto, "messages/component.proto", 1033,
  &descriptor_table_messages_2fcomponent_2eproto_once, descriptor_table_messages_2fcomponent_2eproto_sccs, descriptor_table_messages_2fcomponent_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_messages_2fcomponent_2eproto::offsets,
  file_level_metadata_messages_2fcomponent_2eproto, 5, file_level_enum_descriptors_messages_2fcomponent_2eproto, file_level_service_descriptors_messages_2fcomponent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2fcomponent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2fcomponent_2eproto)), true);
namespace bestia {
namespace messages {

// ===================================================================

void Component::InitAsDefaultInstance() {
}
class Component::_Internal {
 public:
};

Component::Component(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&component_id_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(component_id_));
  // @@protoc_insertion_point(copy_constructor:bestia.messages.Component)
}

void Component::SharedCtor() {
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&component_id_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(component_id_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:bestia.messages.Component)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Component::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Component::ArenaDtor(void* object) {
  Component* _this = reinterpret_cast< Component* >(object);
  (void)_this;
}
void Component::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component& Component::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_messages_2fcomponent_2eproto.base);
  return *internal_default_instance();
}


void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&component_id_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(component_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 entity_id = 1;
  if (this->entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_entity_id(), target);
  }

  // int64 component_id = 2;
  if (this->component_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_component_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.Component)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_entity_id());
  }

  // int64 component_id = 2;
  if (this->component_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_component_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.Component)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  if (from.component_id() != 0) {
    _internal_set_component_id(from._internal_component_id());
  }
}

void Component::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Component, component_id_)
      + sizeof(Component::component_id_)
      - PROTOBUF_FIELD_OFFSET(Component, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionComponent::InitAsDefaultInstance() {
  ::bestia::messages::_PositionComponent_default_instance_._instance.get_mutable()->component_ = const_cast< ::bestia::messages::Component*>(
      ::bestia::messages::Component::internal_default_instance());
  ::bestia::messages::_PositionComponent_default_instance_._instance.get_mutable()->position_ = const_cast< ::bestia::messages::Vec3*>(
      ::bestia::messages::Vec3::internal_default_instance());
}
class PositionComponent::_Internal {
 public:
  static const ::bestia::messages::Component& component(const PositionComponent* msg);
  static const ::bestia::messages::Vec3& position(const PositionComponent* msg);
};

const ::bestia::messages::Component&
PositionComponent::_Internal::component(const PositionComponent* msg) {
  return *msg->component_;
}
const ::bestia::messages::Vec3&
PositionComponent::_Internal::position(const PositionComponent* msg) {
  return *msg->position_;
}
void PositionComponent::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
PositionComponent::PositionComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.PositionComponent)
}
PositionComponent::PositionComponent(const PositionComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_component()) {
    component_ = new ::bestia::messages::Component(*from.component_);
  } else {
    component_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::bestia::messages::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bestia.messages.PositionComponent)
}

void PositionComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionComponent_messages_2fcomponent_2eproto.base);
  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&component_)) + sizeof(position_));
}

PositionComponent::~PositionComponent() {
  // @@protoc_insertion_point(destructor:bestia.messages.PositionComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete component_;
  if (this != internal_default_instance()) delete position_;
}

void PositionComponent::ArenaDtor(void* object) {
  PositionComponent* _this = reinterpret_cast< PositionComponent* >(object);
  (void)_this;
}
void PositionComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionComponent& PositionComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionComponent_messages_2fcomponent_2eproto.base);
  return *internal_default_instance();
}


void PositionComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.PositionComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Component component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.Vec3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.PositionComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::component(this), target, stream);
  }

  // .bestia.messages.Vec3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.PositionComponent)
  return target;
}

size_t PositionComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.PositionComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }

  // .bestia.messages.Vec3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.PositionComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.PositionComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.PositionComponent)
    MergeFrom(*source);
  }
}

void PositionComponent::MergeFrom(const PositionComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.PositionComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_component()) {
    _internal_mutable_component()->::bestia::messages::Component::MergeFrom(from._internal_component());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::bestia::messages::Vec3::MergeFrom(from._internal_position());
  }
}

void PositionComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.PositionComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionComponent::CopyFrom(const PositionComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.PositionComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionComponent::IsInitialized() const {
  return true;
}

void PositionComponent::InternalSwap(PositionComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionComponent, position_)
      + sizeof(PositionComponent::position_)
      - PROTOBUF_FIELD_OFFSET(PositionComponent, component_)>(
          reinterpret_cast<char*>(&component_),
          reinterpret_cast<char*>(&other->component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TemperatureComponent::InitAsDefaultInstance() {
  ::bestia::messages::_TemperatureComponent_default_instance_._instance.get_mutable()->component_ = const_cast< ::bestia::messages::Component*>(
      ::bestia::messages::Component::internal_default_instance());
}
class TemperatureComponent::_Internal {
 public:
  static const ::bestia::messages::Component& component(const TemperatureComponent* msg);
};

const ::bestia::messages::Component&
TemperatureComponent::_Internal::component(const TemperatureComponent* msg) {
  return *msg->component_;
}
TemperatureComponent::TemperatureComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.TemperatureComponent)
}
TemperatureComponent::TemperatureComponent(const TemperatureComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_component()) {
    component_ = new ::bestia::messages::Component(*from.component_);
  } else {
    component_ = nullptr;
  }
  ::memcpy(&max_tolerable_temp_, &from.max_tolerable_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_temp_) -
    reinterpret_cast<char*>(&max_tolerable_temp_)) + sizeof(current_temp_));
  // @@protoc_insertion_point(copy_constructor:bestia.messages.TemperatureComponent)
}

void TemperatureComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemperatureComponent_messages_2fcomponent_2eproto.base);
  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_temp_) -
      reinterpret_cast<char*>(&component_)) + sizeof(current_temp_));
}

TemperatureComponent::~TemperatureComponent() {
  // @@protoc_insertion_point(destructor:bestia.messages.TemperatureComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TemperatureComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete component_;
}

void TemperatureComponent::ArenaDtor(void* object) {
  TemperatureComponent* _this = reinterpret_cast< TemperatureComponent* >(object);
  (void)_this;
}
void TemperatureComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TemperatureComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemperatureComponent& TemperatureComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemperatureComponent_messages_2fcomponent_2eproto.base);
  return *internal_default_instance();
}


void TemperatureComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.TemperatureComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
  ::memset(&max_tolerable_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_temp_) -
      reinterpret_cast<char*>(&max_tolerable_temp_)) + sizeof(current_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemperatureComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Component component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_tolerable_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_tolerable_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_tolerable_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_tolerable_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_temp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemperatureComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.TemperatureComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::component(this), target, stream);
  }

  // int32 max_tolerable_temp = 2;
  if (this->max_tolerable_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_tolerable_temp(), target);
  }

  // int32 min_tolerable_temp = 3;
  if (this->min_tolerable_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_tolerable_temp(), target);
  }

  // int32 current_temp = 4;
  if (this->current_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.TemperatureComponent)
  return target;
}

size_t TemperatureComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.TemperatureComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }

  // int32 max_tolerable_temp = 2;
  if (this->max_tolerable_temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_tolerable_temp());
  }

  // int32 min_tolerable_temp = 3;
  if (this->min_tolerable_temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_tolerable_temp());
  }

  // int32 current_temp = 4;
  if (this->current_temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_temp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemperatureComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.TemperatureComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const TemperatureComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemperatureComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.TemperatureComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.TemperatureComponent)
    MergeFrom(*source);
  }
}

void TemperatureComponent::MergeFrom(const TemperatureComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.TemperatureComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_component()) {
    _internal_mutable_component()->::bestia::messages::Component::MergeFrom(from._internal_component());
  }
  if (from.max_tolerable_temp() != 0) {
    _internal_set_max_tolerable_temp(from._internal_max_tolerable_temp());
  }
  if (from.min_tolerable_temp() != 0) {
    _internal_set_min_tolerable_temp(from._internal_min_tolerable_temp());
  }
  if (from.current_temp() != 0) {
    _internal_set_current_temp(from._internal_current_temp());
  }
}

void TemperatureComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.TemperatureComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureComponent::CopyFrom(const TemperatureComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.TemperatureComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureComponent::IsInitialized() const {
  return true;
}

void TemperatureComponent::InternalSwap(TemperatureComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemperatureComponent, current_temp_)
      + sizeof(TemperatureComponent::current_temp_)
      - PROTOBUF_FIELD_OFFSET(TemperatureComponent, component_)>(
          reinterpret_cast<char*>(&component_),
          reinterpret_cast<char*>(&other->component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemperatureComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualComponent::InitAsDefaultInstance() {
  ::bestia::messages::_VisualComponent_default_instance_._instance.get_mutable()->component_ = const_cast< ::bestia::messages::Component*>(
      ::bestia::messages::Component::internal_default_instance());
}
class VisualComponent::_Internal {
 public:
  static const ::bestia::messages::Component& component(const VisualComponent* msg);
};

const ::bestia::messages::Component&
VisualComponent::_Internal::component(const VisualComponent* msg) {
  return *msg->component_;
}
VisualComponent::VisualComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.VisualComponent)
}
VisualComponent::VisualComponent(const VisualComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  visual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_visual().empty()) {
    visual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_visual(),
      GetArena());
  }
  if (from._internal_has_component()) {
    component_ = new ::bestia::messages::Component(*from.component_);
  } else {
    component_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bestia.messages.VisualComponent)
}

void VisualComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualComponent_messages_2fcomponent_2eproto.base);
  visual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_ = nullptr;
}

VisualComponent::~VisualComponent() {
  // @@protoc_insertion_point(destructor:bestia.messages.VisualComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisualComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  visual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete component_;
}

void VisualComponent::ArenaDtor(void* object) {
  VisualComponent* _this = reinterpret_cast< VisualComponent* >(object);
  (void)_this;
}
void VisualComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisualComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualComponent& VisualComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualComponent_messages_2fcomponent_2eproto.base);
  return *internal_default_instance();
}


void VisualComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.VisualComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visual_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisualComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Component component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string visual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_visual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bestia.messages.VisualComponent.visual"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.VisualComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::component(this), target, stream);
  }

  // string visual = 2;
  if (this->visual().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visual().data(), static_cast<int>(this->_internal_visual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bestia.messages.VisualComponent.visual");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_visual(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.VisualComponent)
  return target;
}

size_t VisualComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.VisualComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string visual = 2;
  if (this->visual().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visual());
  }

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.VisualComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.VisualComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.VisualComponent)
    MergeFrom(*source);
  }
}

void VisualComponent::MergeFrom(const VisualComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.VisualComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.visual().size() > 0) {
    _internal_set_visual(from._internal_visual());
  }
  if (from.has_component()) {
    _internal_mutable_component()->::bestia::messages::Component::MergeFrom(from._internal_component());
  }
}

void VisualComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.VisualComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualComponent::CopyFrom(const VisualComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.VisualComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualComponent::IsInitialized() const {
  return true;
}

void VisualComponent::InternalSwap(VisualComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  visual_.Swap(&other->visual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(component_, other->component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusComponent::InitAsDefaultInstance() {
  ::bestia::messages::_StatusComponent_default_instance_._instance.get_mutable()->component_ = const_cast< ::bestia::messages::Component*>(
      ::bestia::messages::Component::internal_default_instance());
}
class StatusComponent::_Internal {
 public:
  static const ::bestia::messages::Component& component(const StatusComponent* msg);
};

const ::bestia::messages::Component&
StatusComponent::_Internal::component(const StatusComponent* msg) {
  return *msg->component_;
}
StatusComponent::StatusComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.StatusComponent)
}
StatusComponent::StatusComponent(const StatusComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_component()) {
    component_ = new ::bestia::messages::Component(*from.component_);
  } else {
    component_ = nullptr;
  }
  ::memcpy(&physical_defense_, &from.physical_defense_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&physical_defense_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:bestia.messages.StatusComponent)
}

void StatusComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusComponent_messages_2fcomponent_2eproto.base);
  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&component_)) + sizeof(element_));
}

StatusComponent::~StatusComponent() {
  // @@protoc_insertion_point(destructor:bestia.messages.StatusComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete component_;
}

void StatusComponent::ArenaDtor(void* object) {
  StatusComponent* _this = reinterpret_cast< StatusComponent* >(object);
  (void)_this;
}
void StatusComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusComponent& StatusComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusComponent_messages_2fcomponent_2eproto.base);
  return *internal_default_instance();
}


void StatusComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.StatusComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
  ::memset(&physical_defense_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&physical_defense_)) + sizeof(element_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Component component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 physical_defense = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          physical_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_defense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          magic_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vitality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vitality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 intelligence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 willpower = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          willpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dexterity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dexterity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hp_regen_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          hp_regen_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mana_regen_rate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          mana_regen_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float stamina_regen_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          stamina_regen_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float critical_hitrate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          critical_hitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dodge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          dodge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float casttime_mod = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          casttime_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cooldown_mod = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          cooldown_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float spell_duration_mod = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          spell_duration_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hitrate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          hitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float attack_speed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float walkspeed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          walkspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.Element element = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_element(static_cast<::bestia::messages::Element>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.StatusComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::component(this), target, stream);
  }

  // int32 physical_defense = 2;
  if (this->physical_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_physical_defense(), target);
  }

  // int32 magic_defense = 3;
  if (this->magic_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_magic_defense(), target);
  }

  // int32 strength = 4;
  if (this->strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strength(), target);
  }

  // int32 vitality = 5;
  if (this->vitality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vitality(), target);
  }

  // int32 intelligence = 6;
  if (this->intelligence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_intelligence(), target);
  }

  // int32 agility = 7;
  if (this->agility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_agility(), target);
  }

  // int32 willpower = 8;
  if (this->willpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_willpower(), target);
  }

  // int32 dexterity = 9;
  if (this->dexterity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dexterity(), target);
  }

  // float hp_regen_rate = 10;
  if (!(this->hp_regen_rate() <= 0 && this->hp_regen_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_hp_regen_rate(), target);
  }

  // float mana_regen_rate = 11;
  if (!(this->mana_regen_rate() <= 0 && this->mana_regen_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_mana_regen_rate(), target);
  }

  // float stamina_regen_rate = 12;
  if (!(this->stamina_regen_rate() <= 0 && this->stamina_regen_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_stamina_regen_rate(), target);
  }

  // float critical_hitrate = 13;
  if (!(this->critical_hitrate() <= 0 && this->critical_hitrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_critical_hitrate(), target);
  }

  // float dodge = 14;
  if (!(this->dodge() <= 0 && this->dodge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_dodge(), target);
  }

  // float casttime_mod = 15;
  if (!(this->casttime_mod() <= 0 && this->casttime_mod() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_casttime_mod(), target);
  }

  // float cooldown_mod = 16;
  if (!(this->cooldown_mod() <= 0 && this->cooldown_mod() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_cooldown_mod(), target);
  }

  // float spell_duration_mod = 17;
  if (!(this->spell_duration_mod() <= 0 && this->spell_duration_mod() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_spell_duration_mod(), target);
  }

  // float hitrate = 18;
  if (!(this->hitrate() <= 0 && this->hitrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_hitrate(), target);
  }

  // float attack_speed = 19;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_attack_speed(), target);
  }

  // float walkspeed = 20;
  if (!(this->walkspeed() <= 0 && this->walkspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_walkspeed(), target);
  }

  // .bestia.messages.Element element = 21;
  if (this->element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.StatusComponent)
  return target;
}

size_t StatusComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.StatusComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Component component = 1;
  if (this->has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }

  // int32 physical_defense = 2;
  if (this->physical_defense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_physical_defense());
  }

  // int32 magic_defense = 3;
  if (this->magic_defense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_defense());
  }

  // int32 strength = 4;
  if (this->strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strength());
  }

  // int32 vitality = 5;
  if (this->vitality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vitality());
  }

  // int32 intelligence = 6;
  if (this->intelligence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_intelligence());
  }

  // int32 agility = 7;
  if (this->agility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agility());
  }

  // int32 willpower = 8;
  if (this->willpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_willpower());
  }

  // int32 dexterity = 9;
  if (this->dexterity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dexterity());
  }

  // float hp_regen_rate = 10;
  if (!(this->hp_regen_rate() <= 0 && this->hp_regen_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float mana_regen_rate = 11;
  if (!(this->mana_regen_rate() <= 0 && this->mana_regen_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float stamina_regen_rate = 12;
  if (!(this->stamina_regen_rate() <= 0 && this->stamina_regen_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float critical_hitrate = 13;
  if (!(this->critical_hitrate() <= 0 && this->critical_hitrate() >= 0)) {
    total_size += 1 + 4;
  }

  // float dodge = 14;
  if (!(this->dodge() <= 0 && this->dodge() >= 0)) {
    total_size += 1 + 4;
  }

  // float casttime_mod = 15;
  if (!(this->casttime_mod() <= 0 && this->casttime_mod() >= 0)) {
    total_size += 1 + 4;
  }

  // float cooldown_mod = 16;
  if (!(this->cooldown_mod() <= 0 && this->cooldown_mod() >= 0)) {
    total_size += 2 + 4;
  }

  // float spell_duration_mod = 17;
  if (!(this->spell_duration_mod() <= 0 && this->spell_duration_mod() >= 0)) {
    total_size += 2 + 4;
  }

  // float hitrate = 18;
  if (!(this->hitrate() <= 0 && this->hitrate() >= 0)) {
    total_size += 2 + 4;
  }

  // float attack_speed = 19;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // float walkspeed = 20;
  if (!(this->walkspeed() <= 0 && this->walkspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // .bestia.messages.Element element = 21;
  if (this->element() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_element());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.StatusComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.StatusComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.StatusComponent)
    MergeFrom(*source);
  }
}

void StatusComponent::MergeFrom(const StatusComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.StatusComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_component()) {
    _internal_mutable_component()->::bestia::messages::Component::MergeFrom(from._internal_component());
  }
  if (from.physical_defense() != 0) {
    _internal_set_physical_defense(from._internal_physical_defense());
  }
  if (from.magic_defense() != 0) {
    _internal_set_magic_defense(from._internal_magic_defense());
  }
  if (from.strength() != 0) {
    _internal_set_strength(from._internal_strength());
  }
  if (from.vitality() != 0) {
    _internal_set_vitality(from._internal_vitality());
  }
  if (from.intelligence() != 0) {
    _internal_set_intelligence(from._internal_intelligence());
  }
  if (from.agility() != 0) {
    _internal_set_agility(from._internal_agility());
  }
  if (from.willpower() != 0) {
    _internal_set_willpower(from._internal_willpower());
  }
  if (from.dexterity() != 0) {
    _internal_set_dexterity(from._internal_dexterity());
  }
  if (!(from.hp_regen_rate() <= 0 && from.hp_regen_rate() >= 0)) {
    _internal_set_hp_regen_rate(from._internal_hp_regen_rate());
  }
  if (!(from.mana_regen_rate() <= 0 && from.mana_regen_rate() >= 0)) {
    _internal_set_mana_regen_rate(from._internal_mana_regen_rate());
  }
  if (!(from.stamina_regen_rate() <= 0 && from.stamina_regen_rate() >= 0)) {
    _internal_set_stamina_regen_rate(from._internal_stamina_regen_rate());
  }
  if (!(from.critical_hitrate() <= 0 && from.critical_hitrate() >= 0)) {
    _internal_set_critical_hitrate(from._internal_critical_hitrate());
  }
  if (!(from.dodge() <= 0 && from.dodge() >= 0)) {
    _internal_set_dodge(from._internal_dodge());
  }
  if (!(from.casttime_mod() <= 0 && from.casttime_mod() >= 0)) {
    _internal_set_casttime_mod(from._internal_casttime_mod());
  }
  if (!(from.cooldown_mod() <= 0 && from.cooldown_mod() >= 0)) {
    _internal_set_cooldown_mod(from._internal_cooldown_mod());
  }
  if (!(from.spell_duration_mod() <= 0 && from.spell_duration_mod() >= 0)) {
    _internal_set_spell_duration_mod(from._internal_spell_duration_mod());
  }
  if (!(from.hitrate() <= 0 && from.hitrate() >= 0)) {
    _internal_set_hitrate(from._internal_hitrate());
  }
  if (!(from.attack_speed() <= 0 && from.attack_speed() >= 0)) {
    _internal_set_attack_speed(from._internal_attack_speed());
  }
  if (!(from.walkspeed() <= 0 && from.walkspeed() >= 0)) {
    _internal_set_walkspeed(from._internal_walkspeed());
  }
  if (from.element() != 0) {
    _internal_set_element(from._internal_element());
  }
}

void StatusComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.StatusComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusComponent::CopyFrom(const StatusComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.StatusComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusComponent::IsInitialized() const {
  return true;
}

void StatusComponent::InternalSwap(StatusComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusComponent, element_)
      + sizeof(StatusComponent::element_)
      - PROTOBUF_FIELD_OFFSET(StatusComponent, component_)>(
          reinterpret_cast<char*>(&component_),
          reinterpret_cast<char*>(&other->component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bestia::messages::Component* Arena::CreateMaybeMessage< ::bestia::messages::Component >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::PositionComponent* Arena::CreateMaybeMessage< ::bestia::messages::PositionComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::PositionComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::TemperatureComponent* Arena::CreateMaybeMessage< ::bestia::messages::TemperatureComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::TemperatureComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::VisualComponent* Arena::CreateMaybeMessage< ::bestia::messages::VisualComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::VisualComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::StatusComponent* Arena::CreateMaybeMessage< ::bestia::messages::StatusComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::StatusComponent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
