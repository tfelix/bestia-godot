// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/attack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fattack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fattack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2fattack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fattack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fattack_2eproto;
namespace bestia {
namespace messages {
class AttackListRequest;
class AttackListRequestDefaultTypeInternal;
extern AttackListRequestDefaultTypeInternal _AttackListRequest_default_instance_;
class LearnedAttack;
class LearnedAttackDefaultTypeInternal;
extern LearnedAttackDefaultTypeInternal _LearnedAttack_default_instance_;
class LearnedAttacks;
class LearnedAttacksDefaultTypeInternal;
extern LearnedAttacksDefaultTypeInternal _LearnedAttacks_default_instance_;
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> ::bestia::messages::AttackListRequest* Arena::CreateMaybeMessage<::bestia::messages::AttackListRequest>(Arena*);
template<> ::bestia::messages::LearnedAttack* Arena::CreateMaybeMessage<::bestia::messages::LearnedAttack>(Arena*);
template<> ::bestia::messages::LearnedAttacks* Arena::CreateMaybeMessage<::bestia::messages::LearnedAttacks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bestia {
namespace messages {

// ===================================================================

class AttackListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.AttackListRequest) */ {
 public:
  inline AttackListRequest() : AttackListRequest(nullptr) {};
  virtual ~AttackListRequest();

  AttackListRequest(const AttackListRequest& from);
  AttackListRequest(AttackListRequest&& from) noexcept
    : AttackListRequest() {
    *this = ::std::move(from);
  }

  inline AttackListRequest& operator=(const AttackListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttackListRequest& operator=(AttackListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttackListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttackListRequest* internal_default_instance() {
    return reinterpret_cast<const AttackListRequest*>(
               &_AttackListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttackListRequest& a, AttackListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttackListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttackListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttackListRequest* New() const final {
    return CreateMaybeMessage<AttackListRequest>(nullptr);
  }

  AttackListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttackListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttackListRequest& from);
  void MergeFrom(const AttackListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.AttackListRequest";
  }
  protected:
  explicit AttackListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fattack_2eproto);
    return ::descriptor_table_messages_2fattack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .bestia.messages.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bestia::messages::Account& account() const;
  ::bestia::messages::Account* release_account();
  ::bestia::messages::Account* mutable_account();
  void set_allocated_account(::bestia::messages::Account* account);
  private:
  const ::bestia::messages::Account& _internal_account() const;
  ::bestia::messages::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::bestia::messages::Account* account);
  ::bestia::messages::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:bestia.messages.AttackListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Account* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fattack_2eproto;
};
// -------------------------------------------------------------------

class LearnedAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.LearnedAttack) */ {
 public:
  inline LearnedAttack() : LearnedAttack(nullptr) {};
  virtual ~LearnedAttack();

  LearnedAttack(const LearnedAttack& from);
  LearnedAttack(LearnedAttack&& from) noexcept
    : LearnedAttack() {
    *this = ::std::move(from);
  }

  inline LearnedAttack& operator=(const LearnedAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline LearnedAttack& operator=(LearnedAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LearnedAttack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LearnedAttack* internal_default_instance() {
    return reinterpret_cast<const LearnedAttack*>(
               &_LearnedAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LearnedAttack& a, LearnedAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(LearnedAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LearnedAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LearnedAttack* New() const final {
    return CreateMaybeMessage<LearnedAttack>(nullptr);
  }

  LearnedAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LearnedAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LearnedAttack& from);
  void MergeFrom(const LearnedAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearnedAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.LearnedAttack";
  }
  protected:
  explicit LearnedAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fattack_2eproto);
    return ::descriptor_table_messages_2fattack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackDbNameFieldNumber = 2,
    kAttackIdFieldNumber = 1,
    kMinLevelFieldNumber = 3,
  };
  // string attack_db_name = 2;
  void clear_attack_db_name();
  const std::string& attack_db_name() const;
  void set_attack_db_name(const std::string& value);
  void set_attack_db_name(std::string&& value);
  void set_attack_db_name(const char* value);
  void set_attack_db_name(const char* value, size_t size);
  std::string* mutable_attack_db_name();
  std::string* release_attack_db_name();
  void set_allocated_attack_db_name(std::string* attack_db_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attack_db_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attack_db_name(
      std::string* attack_db_name);
  private:
  const std::string& _internal_attack_db_name() const;
  void _internal_set_attack_db_name(const std::string& value);
  std::string* _internal_mutable_attack_db_name();
  public:

  // uint64 attack_id = 1;
  void clear_attack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 attack_id() const;
  void set_attack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attack_id() const;
  void _internal_set_attack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 min_level = 3;
  void clear_min_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_level() const;
  void set_min_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_level() const;
  void _internal_set_min_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.LearnedAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attack_db_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attack_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fattack_2eproto;
};
// -------------------------------------------------------------------

class LearnedAttacks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.LearnedAttacks) */ {
 public:
  inline LearnedAttacks() : LearnedAttacks(nullptr) {};
  virtual ~LearnedAttacks();

  LearnedAttacks(const LearnedAttacks& from);
  LearnedAttacks(LearnedAttacks&& from) noexcept
    : LearnedAttacks() {
    *this = ::std::move(from);
  }

  inline LearnedAttacks& operator=(const LearnedAttacks& from) {
    CopyFrom(from);
    return *this;
  }
  inline LearnedAttacks& operator=(LearnedAttacks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LearnedAttacks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LearnedAttacks* internal_default_instance() {
    return reinterpret_cast<const LearnedAttacks*>(
               &_LearnedAttacks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LearnedAttacks& a, LearnedAttacks& b) {
    a.Swap(&b);
  }
  inline void Swap(LearnedAttacks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LearnedAttacks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LearnedAttacks* New() const final {
    return CreateMaybeMessage<LearnedAttacks>(nullptr);
  }

  LearnedAttacks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LearnedAttacks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LearnedAttacks& from);
  void MergeFrom(const LearnedAttacks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearnedAttacks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.LearnedAttacks";
  }
  protected:
  explicit LearnedAttacks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fattack_2eproto);
    return ::descriptor_table_messages_2fattack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttacksFieldNumber = 2,
    kPlayerBestiaIdFieldNumber = 1,
  };
  // repeated .bestia.messages.LearnedAttack attacks = 2;
  int attacks_size() const;
  private:
  int _internal_attacks_size() const;
  public:
  void clear_attacks();
  ::bestia::messages::LearnedAttack* mutable_attacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bestia::messages::LearnedAttack >*
      mutable_attacks();
  private:
  const ::bestia::messages::LearnedAttack& _internal_attacks(int index) const;
  ::bestia::messages::LearnedAttack* _internal_add_attacks();
  public:
  const ::bestia::messages::LearnedAttack& attacks(int index) const;
  ::bestia::messages::LearnedAttack* add_attacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bestia::messages::LearnedAttack >&
      attacks() const;

  // uint64 player_bestia_id = 1;
  void clear_player_bestia_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_bestia_id() const;
  void set_player_bestia_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_bestia_id() const;
  void _internal_set_player_bestia_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.LearnedAttacks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bestia::messages::LearnedAttack > attacks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_bestia_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fattack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttackListRequest

// .bestia.messages.Account account = 1;
inline bool AttackListRequest::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool AttackListRequest::has_account() const {
  return _internal_has_account();
}
inline const ::bestia::messages::Account& AttackListRequest::_internal_account() const {
  const ::bestia::messages::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Account*>(
      &::bestia::messages::_Account_default_instance_);
}
inline const ::bestia::messages::Account& AttackListRequest::account() const {
  // @@protoc_insertion_point(field_get:bestia.messages.AttackListRequest.account)
  return _internal_account();
}
inline void AttackListRequest::unsafe_arena_set_allocated_account(
    ::bestia::messages::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.AttackListRequest.account)
}
inline ::bestia::messages::Account* AttackListRequest::release_account() {
  auto temp = unsafe_arena_release_account();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Account* AttackListRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:bestia.messages.AttackListRequest.account)
  
  ::bestia::messages::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bestia::messages::Account* AttackListRequest::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::bestia::messages::Account* AttackListRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.AttackListRequest.account)
  return _internal_mutable_account();
}
inline void AttackListRequest::set_allocated_account(::bestia::messages::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.AttackListRequest.account)
}

// -------------------------------------------------------------------

// LearnedAttack

// uint64 attack_id = 1;
inline void LearnedAttack::clear_attack_id() {
  attack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LearnedAttack::_internal_attack_id() const {
  return attack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LearnedAttack::attack_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.LearnedAttack.attack_id)
  return _internal_attack_id();
}
inline void LearnedAttack::_internal_set_attack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attack_id_ = value;
}
inline void LearnedAttack::set_attack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attack_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.LearnedAttack.attack_id)
}

// string attack_db_name = 2;
inline void LearnedAttack::clear_attack_db_name() {
  attack_db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LearnedAttack::attack_db_name() const {
  // @@protoc_insertion_point(field_get:bestia.messages.LearnedAttack.attack_db_name)
  return _internal_attack_db_name();
}
inline void LearnedAttack::set_attack_db_name(const std::string& value) {
  _internal_set_attack_db_name(value);
  // @@protoc_insertion_point(field_set:bestia.messages.LearnedAttack.attack_db_name)
}
inline std::string* LearnedAttack::mutable_attack_db_name() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.LearnedAttack.attack_db_name)
  return _internal_mutable_attack_db_name();
}
inline const std::string& LearnedAttack::_internal_attack_db_name() const {
  return attack_db_name_.Get();
}
inline void LearnedAttack::_internal_set_attack_db_name(const std::string& value) {
  
  attack_db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LearnedAttack::set_attack_db_name(std::string&& value) {
  
  attack_db_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bestia.messages.LearnedAttack.attack_db_name)
}
inline void LearnedAttack::set_attack_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attack_db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bestia.messages.LearnedAttack.attack_db_name)
}
inline void LearnedAttack::set_attack_db_name(const char* value,
    size_t size) {
  
  attack_db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bestia.messages.LearnedAttack.attack_db_name)
}
inline std::string* LearnedAttack::_internal_mutable_attack_db_name() {
  
  return attack_db_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LearnedAttack::release_attack_db_name() {
  // @@protoc_insertion_point(field_release:bestia.messages.LearnedAttack.attack_db_name)
  return attack_db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LearnedAttack::set_allocated_attack_db_name(std::string* attack_db_name) {
  if (attack_db_name != nullptr) {
    
  } else {
    
  }
  attack_db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attack_db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.LearnedAttack.attack_db_name)
}
inline std::string* LearnedAttack::unsafe_arena_release_attack_db_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bestia.messages.LearnedAttack.attack_db_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return attack_db_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LearnedAttack::unsafe_arena_set_allocated_attack_db_name(
    std::string* attack_db_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (attack_db_name != nullptr) {
    
  } else {
    
  }
  attack_db_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attack_db_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.LearnedAttack.attack_db_name)
}

// uint32 min_level = 3;
inline void LearnedAttack::clear_min_level() {
  min_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LearnedAttack::_internal_min_level() const {
  return min_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LearnedAttack::min_level() const {
  // @@protoc_insertion_point(field_get:bestia.messages.LearnedAttack.min_level)
  return _internal_min_level();
}
inline void LearnedAttack::_internal_set_min_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_level_ = value;
}
inline void LearnedAttack::set_min_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:bestia.messages.LearnedAttack.min_level)
}

// -------------------------------------------------------------------

// LearnedAttacks

// uint64 player_bestia_id = 1;
inline void LearnedAttacks::clear_player_bestia_id() {
  player_bestia_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LearnedAttacks::_internal_player_bestia_id() const {
  return player_bestia_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LearnedAttacks::player_bestia_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.LearnedAttacks.player_bestia_id)
  return _internal_player_bestia_id();
}
inline void LearnedAttacks::_internal_set_player_bestia_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_bestia_id_ = value;
}
inline void LearnedAttacks::set_player_bestia_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_bestia_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.LearnedAttacks.player_bestia_id)
}

// repeated .bestia.messages.LearnedAttack attacks = 2;
inline int LearnedAttacks::_internal_attacks_size() const {
  return attacks_.size();
}
inline int LearnedAttacks::attacks_size() const {
  return _internal_attacks_size();
}
inline void LearnedAttacks::clear_attacks() {
  attacks_.Clear();
}
inline ::bestia::messages::LearnedAttack* LearnedAttacks::mutable_attacks(int index) {
  // @@protoc_insertion_point(field_mutable:bestia.messages.LearnedAttacks.attacks)
  return attacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bestia::messages::LearnedAttack >*
LearnedAttacks::mutable_attacks() {
  // @@protoc_insertion_point(field_mutable_list:bestia.messages.LearnedAttacks.attacks)
  return &attacks_;
}
inline const ::bestia::messages::LearnedAttack& LearnedAttacks::_internal_attacks(int index) const {
  return attacks_.Get(index);
}
inline const ::bestia::messages::LearnedAttack& LearnedAttacks::attacks(int index) const {
  // @@protoc_insertion_point(field_get:bestia.messages.LearnedAttacks.attacks)
  return _internal_attacks(index);
}
inline ::bestia::messages::LearnedAttack* LearnedAttacks::_internal_add_attacks() {
  return attacks_.Add();
}
inline ::bestia::messages::LearnedAttack* LearnedAttacks::add_attacks() {
  // @@protoc_insertion_point(field_add:bestia.messages.LearnedAttacks.attacks)
  return _internal_add_attacks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bestia::messages::LearnedAttack >&
LearnedAttacks::attacks() const {
  // @@protoc_insertion_point(field_list:bestia.messages.LearnedAttacks.attacks)
  return attacks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace bestia

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fattack_2eproto
