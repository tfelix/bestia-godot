// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/inventory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2finventory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2finventory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2finventory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2finventory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2finventory_2eproto;
namespace bestia {
namespace messages {
class DropItem;
class DropItemDefaultTypeInternal;
extern DropItemDefaultTypeInternal _DropItem_default_instance_;
class PickupItem;
class PickupItemDefaultTypeInternal;
extern PickupItemDefaultTypeInternal _PickupItem_default_instance_;
class UseItem;
class UseItemDefaultTypeInternal;
extern UseItemDefaultTypeInternal _UseItem_default_instance_;
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> ::bestia::messages::DropItem* Arena::CreateMaybeMessage<::bestia::messages::DropItem>(Arena*);
template<> ::bestia::messages::PickupItem* Arena::CreateMaybeMessage<::bestia::messages::PickupItem>(Arena*);
template<> ::bestia::messages::UseItem* Arena::CreateMaybeMessage<::bestia::messages::UseItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bestia {
namespace messages {

// ===================================================================

class UseItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.UseItem) */ {
 public:
  inline UseItem() : UseItem(nullptr) {};
  virtual ~UseItem();

  UseItem(const UseItem& from);
  UseItem(UseItem&& from) noexcept
    : UseItem() {
    *this = ::std::move(from);
  }

  inline UseItem& operator=(const UseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseItem& operator=(UseItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseItem* internal_default_instance() {
    return reinterpret_cast<const UseItem*>(
               &_UseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UseItem& a, UseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UseItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseItem* New() const final {
    return CreateMaybeMessage<UseItem>(nullptr);
  }

  UseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseItem& from);
  void MergeFrom(const UseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.UseItem";
  }
  protected:
  explicit UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2finventory_2eproto);
    return ::descriptor_table_messages_2finventory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerItemIdFieldNumber = 2,
  };
  // .bestia.messages.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bestia::messages::Account& account() const;
  ::bestia::messages::Account* release_account();
  ::bestia::messages::Account* mutable_account();
  void set_allocated_account(::bestia::messages::Account* account);
  private:
  const ::bestia::messages::Account& _internal_account() const;
  ::bestia::messages::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::bestia::messages::Account* account);
  ::bestia::messages::Account* unsafe_arena_release_account();

  // uint64 player_item_id = 2;
  void clear_player_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id() const;
  void set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_item_id() const;
  void _internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.UseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Account* account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2finventory_2eproto;
};
// -------------------------------------------------------------------

class DropItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.DropItem) */ {
 public:
  inline DropItem() : DropItem(nullptr) {};
  virtual ~DropItem();

  DropItem(const DropItem& from);
  DropItem(DropItem&& from) noexcept
    : DropItem() {
    *this = ::std::move(from);
  }

  inline DropItem& operator=(const DropItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropItem& operator=(DropItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropItem* internal_default_instance() {
    return reinterpret_cast<const DropItem*>(
               &_DropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DropItem& a, DropItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DropItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropItem* New() const final {
    return CreateMaybeMessage<DropItem>(nullptr);
  }

  DropItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropItem& from);
  void MergeFrom(const DropItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.DropItem";
  }
  protected:
  explicit DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2finventory_2eproto);
    return ::descriptor_table_messages_2finventory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerItemIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // .bestia.messages.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bestia::messages::Account& account() const;
  ::bestia::messages::Account* release_account();
  ::bestia::messages::Account* mutable_account();
  void set_allocated_account(::bestia::messages::Account* account);
  private:
  const ::bestia::messages::Account& _internal_account() const;
  ::bestia::messages::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::bestia::messages::Account* account);
  ::bestia::messages::Account* unsafe_arena_release_account();

  // uint64 player_item_id = 2;
  void clear_player_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id() const;
  void set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_item_id() const;
  void _internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.DropItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Account* account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2finventory_2eproto;
};
// -------------------------------------------------------------------

class PickupItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.PickupItem) */ {
 public:
  inline PickupItem() : PickupItem(nullptr) {};
  virtual ~PickupItem();

  PickupItem(const PickupItem& from);
  PickupItem(PickupItem&& from) noexcept
    : PickupItem() {
    *this = ::std::move(from);
  }

  inline PickupItem& operator=(const PickupItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PickupItem& operator=(PickupItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PickupItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PickupItem* internal_default_instance() {
    return reinterpret_cast<const PickupItem*>(
               &_PickupItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PickupItem& a, PickupItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PickupItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PickupItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PickupItem* New() const final {
    return CreateMaybeMessage<PickupItem>(nullptr);
  }

  PickupItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PickupItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PickupItem& from);
  void MergeFrom(const PickupItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PickupItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.PickupItem";
  }
  protected:
  explicit PickupItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2finventory_2eproto);
    return ::descriptor_table_messages_2finventory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerItemIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // .bestia.messages.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bestia::messages::Account& account() const;
  ::bestia::messages::Account* release_account();
  ::bestia::messages::Account* mutable_account();
  void set_allocated_account(::bestia::messages::Account* account);
  private:
  const ::bestia::messages::Account& _internal_account() const;
  ::bestia::messages::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::bestia::messages::Account* account);
  ::bestia::messages::Account* unsafe_arena_release_account();

  // uint64 player_item_id = 2;
  void clear_player_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id() const;
  void set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_item_id() const;
  void _internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.PickupItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Account* account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2finventory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UseItem

// .bestia.messages.Account account = 1;
inline bool UseItem::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool UseItem::has_account() const {
  return _internal_has_account();
}
inline const ::bestia::messages::Account& UseItem::_internal_account() const {
  const ::bestia::messages::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Account*>(
      &::bestia::messages::_Account_default_instance_);
}
inline const ::bestia::messages::Account& UseItem::account() const {
  // @@protoc_insertion_point(field_get:bestia.messages.UseItem.account)
  return _internal_account();
}
inline void UseItem::unsafe_arena_set_allocated_account(
    ::bestia::messages::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.UseItem.account)
}
inline ::bestia::messages::Account* UseItem::release_account() {
  auto temp = unsafe_arena_release_account();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Account* UseItem::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:bestia.messages.UseItem.account)
  
  ::bestia::messages::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bestia::messages::Account* UseItem::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::bestia::messages::Account* UseItem::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.UseItem.account)
  return _internal_mutable_account();
}
inline void UseItem::set_allocated_account(::bestia::messages::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.UseItem.account)
}

// uint64 player_item_id = 2;
inline void UseItem::clear_player_item_id() {
  player_item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UseItem::_internal_player_item_id() const {
  return player_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UseItem::player_item_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.UseItem.player_item_id)
  return _internal_player_item_id();
}
inline void UseItem::_internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_item_id_ = value;
}
inline void UseItem::set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_item_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.UseItem.player_item_id)
}

// -------------------------------------------------------------------

// DropItem

// .bestia.messages.Account account = 1;
inline bool DropItem::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool DropItem::has_account() const {
  return _internal_has_account();
}
inline const ::bestia::messages::Account& DropItem::_internal_account() const {
  const ::bestia::messages::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Account*>(
      &::bestia::messages::_Account_default_instance_);
}
inline const ::bestia::messages::Account& DropItem::account() const {
  // @@protoc_insertion_point(field_get:bestia.messages.DropItem.account)
  return _internal_account();
}
inline void DropItem::unsafe_arena_set_allocated_account(
    ::bestia::messages::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.DropItem.account)
}
inline ::bestia::messages::Account* DropItem::release_account() {
  auto temp = unsafe_arena_release_account();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Account* DropItem::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:bestia.messages.DropItem.account)
  
  ::bestia::messages::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bestia::messages::Account* DropItem::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::bestia::messages::Account* DropItem::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.DropItem.account)
  return _internal_mutable_account();
}
inline void DropItem::set_allocated_account(::bestia::messages::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.DropItem.account)
}

// uint64 player_item_id = 2;
inline void DropItem::clear_player_item_id() {
  player_item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DropItem::_internal_player_item_id() const {
  return player_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DropItem::player_item_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.DropItem.player_item_id)
  return _internal_player_item_id();
}
inline void DropItem::_internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_item_id_ = value;
}
inline void DropItem::set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_item_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.DropItem.player_item_id)
}

// uint32 amount = 3;
inline void DropItem::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropItem::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DropItem::amount() const {
  // @@protoc_insertion_point(field_get:bestia.messages.DropItem.amount)
  return _internal_amount();
}
inline void DropItem::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void DropItem::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bestia.messages.DropItem.amount)
}

// -------------------------------------------------------------------

// PickupItem

// .bestia.messages.Account account = 1;
inline bool PickupItem::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool PickupItem::has_account() const {
  return _internal_has_account();
}
inline const ::bestia::messages::Account& PickupItem::_internal_account() const {
  const ::bestia::messages::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Account*>(
      &::bestia::messages::_Account_default_instance_);
}
inline const ::bestia::messages::Account& PickupItem::account() const {
  // @@protoc_insertion_point(field_get:bestia.messages.PickupItem.account)
  return _internal_account();
}
inline void PickupItem::unsafe_arena_set_allocated_account(
    ::bestia::messages::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.PickupItem.account)
}
inline ::bestia::messages::Account* PickupItem::release_account() {
  auto temp = unsafe_arena_release_account();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Account* PickupItem::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:bestia.messages.PickupItem.account)
  
  ::bestia::messages::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bestia::messages::Account* PickupItem::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::bestia::messages::Account* PickupItem::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.PickupItem.account)
  return _internal_mutable_account();
}
inline void PickupItem::set_allocated_account(::bestia::messages::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account)->GetArena();
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.PickupItem.account)
}

// uint64 player_item_id = 2;
inline void PickupItem::clear_player_item_id() {
  player_item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PickupItem::_internal_player_item_id() const {
  return player_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PickupItem::player_item_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.PickupItem.player_item_id)
  return _internal_player_item_id();
}
inline void PickupItem::_internal_set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_item_id_ = value;
}
inline void PickupItem::set_player_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_item_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.PickupItem.player_item_id)
}

// uint32 amount = 3;
inline void PickupItem::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PickupItem::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PickupItem::amount() const {
  // @@protoc_insertion_point(field_get:bestia.messages.PickupItem.amount)
  return _internal_amount();
}
inline void PickupItem::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void PickupItem::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bestia.messages.PickupItem.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace bestia

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2finventory_2eproto
