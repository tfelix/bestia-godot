// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/inventory.proto

#include "messages/inventory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_messages_2fmodel_2eproto;
namespace bestia {
namespace messages {
class UseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItem> _instance;
} _UseItem_default_instance_;
class DropItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropItem> _instance;
} _DropItem_default_instance_;
class PickupItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PickupItem> _instance;
} _PickupItem_default_instance_;
}  // namespace messages
}  // namespace bestia
static void InitDefaultsscc_info_DropItem_messages_2finventory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_DropItem_default_instance_;
    new (ptr) ::bestia::messages::DropItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::DropItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropItem_messages_2finventory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DropItem_messages_2finventory_2eproto}, {
      &scc_info_Account_messages_2fmodel_2eproto.base,}};

static void InitDefaultsscc_info_PickupItem_messages_2finventory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_PickupItem_default_instance_;
    new (ptr) ::bestia::messages::PickupItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::PickupItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PickupItem_messages_2finventory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PickupItem_messages_2finventory_2eproto}, {
      &scc_info_Account_messages_2fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UseItem_messages_2finventory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_UseItem_default_instance_;
    new (ptr) ::bestia::messages::UseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::UseItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UseItem_messages_2finventory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UseItem_messages_2finventory_2eproto}, {
      &scc_info_Account_messages_2fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2finventory_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2finventory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2finventory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2finventory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::UseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::UseItem, account_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::UseItem, player_item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::DropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::DropItem, account_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::DropItem, player_item_id_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::DropItem, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PickupItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PickupItem, account_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PickupItem, player_item_id_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::PickupItem, amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bestia::messages::UseItem)},
  { 7, -1, sizeof(::bestia::messages::DropItem)},
  { 15, -1, sizeof(::bestia::messages::PickupItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_UseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_DropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_PickupItem_default_instance_),
};

const char descriptor_table_protodef_messages_2finventory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030messages/inventory.proto\022\017bestia.messa"
  "ges\032\024messages/model.proto\"L\n\007UseItem\022)\n\007"
  "account\030\001 \001(\0132\030.bestia.messages.Account\022"
  "\026\n\016player_item_id\030\002 \001(\004\"]\n\010DropItem\022)\n\007a"
  "ccount\030\001 \001(\0132\030.bestia.messages.Account\022\026"
  "\n\016player_item_id\030\002 \001(\004\022\016\n\006amount\030\003 \001(\r\"_"
  "\n\nPickupItem\022)\n\007account\030\001 \001(\0132\030.bestia.m"
  "essages.Account\022\026\n\016player_item_id\030\002 \001(\004\022"
  "\016\n\006amount\030\003 \001(\rB,\n\031net.bestia.messages.p"
  "rotoB\017InventoryProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2finventory_2eproto_deps[1] = {
  &::descriptor_table_messages_2fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2finventory_2eproto_sccs[3] = {
  &scc_info_DropItem_messages_2finventory_2eproto.base,
  &scc_info_PickupItem_messages_2finventory_2eproto.base,
  &scc_info_UseItem_messages_2finventory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2finventory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2finventory_2eproto = {
  false, false, descriptor_table_protodef_messages_2finventory_2eproto, "messages/inventory.proto", 389,
  &descriptor_table_messages_2finventory_2eproto_once, descriptor_table_messages_2finventory_2eproto_sccs, descriptor_table_messages_2finventory_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_messages_2finventory_2eproto::offsets,
  file_level_metadata_messages_2finventory_2eproto, 3, file_level_enum_descriptors_messages_2finventory_2eproto, file_level_service_descriptors_messages_2finventory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2finventory_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2finventory_2eproto)), true);
namespace bestia {
namespace messages {

// ===================================================================

void UseItem::InitAsDefaultInstance() {
  ::bestia::messages::_UseItem_default_instance_._instance.get_mutable()->account_ = const_cast< ::bestia::messages::Account*>(
      ::bestia::messages::Account::internal_default_instance());
}
class UseItem::_Internal {
 public:
  static const ::bestia::messages::Account& account(const UseItem* msg);
};

const ::bestia::messages::Account&
UseItem::_Internal::account(const UseItem* msg) {
  return *msg->account_;
}
void UseItem::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
UseItem::UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.UseItem)
}
UseItem::UseItem(const UseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bestia::messages::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  player_item_id_ = from.player_item_id_;
  // @@protoc_insertion_point(copy_constructor:bestia.messages.UseItem)
}

void UseItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseItem_messages_2finventory_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_item_id_) -
      reinterpret_cast<char*>(&account_)) + sizeof(player_item_id_));
}

UseItem::~UseItem() {
  // @@protoc_insertion_point(destructor:bestia.messages.UseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void UseItem::ArenaDtor(void* object) {
  UseItem* _this = reinterpret_cast< UseItem* >(object);
  (void)_this;
}
void UseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItem& UseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItem_messages_2finventory_2eproto.base);
  return *internal_default_instance();
}


void UseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.UseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  player_item_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.UseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.UseItem)
  return target;
}

size_t UseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.UseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.UseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.UseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.UseItem)
    MergeFrom(*source);
  }
}

void UseItem::MergeFrom(const UseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.UseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::bestia::messages::Account::MergeFrom(from._internal_account());
  }
  if (from.player_item_id() != 0) {
    _internal_set_player_item_id(from._internal_player_item_id());
  }
}

void UseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.UseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItem::CopyFrom(const UseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.UseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItem::IsInitialized() const {
  return true;
}

void UseItem::InternalSwap(UseItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseItem, player_item_id_)
      + sizeof(UseItem::player_item_id_)
      - PROTOBUF_FIELD_OFFSET(UseItem, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropItem::InitAsDefaultInstance() {
  ::bestia::messages::_DropItem_default_instance_._instance.get_mutable()->account_ = const_cast< ::bestia::messages::Account*>(
      ::bestia::messages::Account::internal_default_instance());
}
class DropItem::_Internal {
 public:
  static const ::bestia::messages::Account& account(const DropItem* msg);
};

const ::bestia::messages::Account&
DropItem::_Internal::account(const DropItem* msg) {
  return *msg->account_;
}
void DropItem::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
DropItem::DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.DropItem)
}
DropItem::DropItem(const DropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bestia::messages::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  ::memcpy(&player_item_id_, &from.player_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&player_item_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:bestia.messages.DropItem)
}

void DropItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropItem_messages_2finventory_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&account_)) + sizeof(amount_));
}

DropItem::~DropItem() {
  // @@protoc_insertion_point(destructor:bestia.messages.DropItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void DropItem::ArenaDtor(void* object) {
  DropItem* _this = reinterpret_cast< DropItem* >(object);
  (void)_this;
}
void DropItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropItem& DropItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropItem_messages_2finventory_2eproto.base);
  return *internal_default_instance();
}


void DropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.DropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  ::memset(&player_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&player_item_id_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.DropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_item_id(), target);
  }

  // uint32 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.DropItem)
  return target;
}

size_t DropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.DropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_item_id());
  }

  // uint32 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.DropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.DropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.DropItem)
    MergeFrom(*source);
  }
}

void DropItem::MergeFrom(const DropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.DropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::bestia::messages::Account::MergeFrom(from._internal_account());
  }
  if (from.player_item_id() != 0) {
    _internal_set_player_item_id(from._internal_player_item_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.DropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItem::CopyFrom(const DropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.DropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItem::IsInitialized() const {
  return true;
}

void DropItem::InternalSwap(DropItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropItem, amount_)
      + sizeof(DropItem::amount_)
      - PROTOBUF_FIELD_OFFSET(DropItem, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PickupItem::InitAsDefaultInstance() {
  ::bestia::messages::_PickupItem_default_instance_._instance.get_mutable()->account_ = const_cast< ::bestia::messages::Account*>(
      ::bestia::messages::Account::internal_default_instance());
}
class PickupItem::_Internal {
 public:
  static const ::bestia::messages::Account& account(const PickupItem* msg);
};

const ::bestia::messages::Account&
PickupItem::_Internal::account(const PickupItem* msg) {
  return *msg->account_;
}
void PickupItem::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
PickupItem::PickupItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.PickupItem)
}
PickupItem::PickupItem(const PickupItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bestia::messages::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  ::memcpy(&player_item_id_, &from.player_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&player_item_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:bestia.messages.PickupItem)
}

void PickupItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PickupItem_messages_2finventory_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&account_)) + sizeof(amount_));
}

PickupItem::~PickupItem() {
  // @@protoc_insertion_point(destructor:bestia.messages.PickupItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PickupItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void PickupItem::ArenaDtor(void* object) {
  PickupItem* _this = reinterpret_cast< PickupItem* >(object);
  (void)_this;
}
void PickupItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PickupItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PickupItem& PickupItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PickupItem_messages_2finventory_2eproto.base);
  return *internal_default_instance();
}


void PickupItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.PickupItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  ::memset(&player_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&player_item_id_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PickupItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PickupItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.PickupItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_item_id(), target);
  }

  // uint32 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.PickupItem)
  return target;
}

size_t PickupItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.PickupItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bestia.messages.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 player_item_id = 2;
  if (this->player_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_item_id());
  }

  // uint32 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PickupItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.PickupItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PickupItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PickupItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.PickupItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.PickupItem)
    MergeFrom(*source);
  }
}

void PickupItem::MergeFrom(const PickupItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.PickupItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::bestia::messages::Account::MergeFrom(from._internal_account());
  }
  if (from.player_item_id() != 0) {
    _internal_set_player_item_id(from._internal_player_item_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void PickupItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.PickupItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickupItem::CopyFrom(const PickupItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.PickupItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickupItem::IsInitialized() const {
  return true;
}

void PickupItem::InternalSwap(PickupItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PickupItem, amount_)
      + sizeof(PickupItem::amount_)
      - PROTOBUF_FIELD_OFFSET(PickupItem, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PickupItem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bestia::messages::UseItem* Arena::CreateMaybeMessage< ::bestia::messages::UseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::UseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::DropItem* Arena::CreateMaybeMessage< ::bestia::messages::DropItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::DropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bestia::messages::PickupItem* Arena::CreateMaybeMessage< ::bestia::messages::PickupItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::PickupItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
