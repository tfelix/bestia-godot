// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fcomponent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fcomponent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages/model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2fcomponent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fcomponent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fcomponent_2eproto;
namespace bestia {
namespace messages {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class PositionComponent;
class PositionComponentDefaultTypeInternal;
extern PositionComponentDefaultTypeInternal _PositionComponent_default_instance_;
class StatusComponent;
class StatusComponentDefaultTypeInternal;
extern StatusComponentDefaultTypeInternal _StatusComponent_default_instance_;
class TemperatureComponent;
class TemperatureComponentDefaultTypeInternal;
extern TemperatureComponentDefaultTypeInternal _TemperatureComponent_default_instance_;
class VisualComponent;
class VisualComponentDefaultTypeInternal;
extern VisualComponentDefaultTypeInternal _VisualComponent_default_instance_;
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> ::bestia::messages::Component* Arena::CreateMaybeMessage<::bestia::messages::Component>(Arena*);
template<> ::bestia::messages::PositionComponent* Arena::CreateMaybeMessage<::bestia::messages::PositionComponent>(Arena*);
template<> ::bestia::messages::StatusComponent* Arena::CreateMaybeMessage<::bestia::messages::StatusComponent>(Arena*);
template<> ::bestia::messages::TemperatureComponent* Arena::CreateMaybeMessage<::bestia::messages::TemperatureComponent>(Arena*);
template<> ::bestia::messages::VisualComponent* Arena::CreateMaybeMessage<::bestia::messages::VisualComponent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bestia {
namespace messages {

// ===================================================================

class Component PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.Component) */ {
 public:
  inline Component() : Component(nullptr) {};
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fcomponent_2eproto);
    return ::descriptor_table_messages_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kComponentIdFieldNumber = 2,
  };
  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 component_id = 2;
  void clear_component_id();
  ::PROTOBUF_NAMESPACE_ID::int64 component_id() const;
  void set_component_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_component_id() const;
  void _internal_set_component_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 component_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fcomponent_2eproto;
};
// -------------------------------------------------------------------

class PositionComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.PositionComponent) */ {
 public:
  inline PositionComponent() : PositionComponent(nullptr) {};
  virtual ~PositionComponent();

  PositionComponent(const PositionComponent& from);
  PositionComponent(PositionComponent&& from) noexcept
    : PositionComponent() {
    *this = ::std::move(from);
  }

  inline PositionComponent& operator=(const PositionComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionComponent& operator=(PositionComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionComponent* internal_default_instance() {
    return reinterpret_cast<const PositionComponent*>(
               &_PositionComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionComponent& a, PositionComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionComponent* New() const final {
    return CreateMaybeMessage<PositionComponent>(nullptr);
  }

  PositionComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionComponent& from);
  void MergeFrom(const PositionComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.PositionComponent";
  }
  protected:
  explicit PositionComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fcomponent_2eproto);
    return ::descriptor_table_messages_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // .bestia.messages.Component component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::bestia::messages::Component& component() const;
  ::bestia::messages::Component* release_component();
  ::bestia::messages::Component* mutable_component();
  void set_allocated_component(::bestia::messages::Component* component);
  private:
  const ::bestia::messages::Component& _internal_component() const;
  ::bestia::messages::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::bestia::messages::Component* component);
  ::bestia::messages::Component* unsafe_arena_release_component();

  // .bestia.messages.Vec3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::bestia::messages::Vec3& position() const;
  ::bestia::messages::Vec3* release_position();
  ::bestia::messages::Vec3* mutable_position();
  void set_allocated_position(::bestia::messages::Vec3* position);
  private:
  const ::bestia::messages::Vec3& _internal_position() const;
  ::bestia::messages::Vec3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::bestia::messages::Vec3* position);
  ::bestia::messages::Vec3* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:bestia.messages.PositionComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Component* component_;
  ::bestia::messages::Vec3* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fcomponent_2eproto;
};
// -------------------------------------------------------------------

class TemperatureComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.TemperatureComponent) */ {
 public:
  inline TemperatureComponent() : TemperatureComponent(nullptr) {};
  virtual ~TemperatureComponent();

  TemperatureComponent(const TemperatureComponent& from);
  TemperatureComponent(TemperatureComponent&& from) noexcept
    : TemperatureComponent() {
    *this = ::std::move(from);
  }

  inline TemperatureComponent& operator=(const TemperatureComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemperatureComponent& operator=(TemperatureComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TemperatureComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemperatureComponent* internal_default_instance() {
    return reinterpret_cast<const TemperatureComponent*>(
               &_TemperatureComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TemperatureComponent& a, TemperatureComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(TemperatureComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemperatureComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TemperatureComponent* New() const final {
    return CreateMaybeMessage<TemperatureComponent>(nullptr);
  }

  TemperatureComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemperatureComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemperatureComponent& from);
  void MergeFrom(const TemperatureComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemperatureComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.TemperatureComponent";
  }
  protected:
  explicit TemperatureComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fcomponent_2eproto);
    return ::descriptor_table_messages_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kMaxTolerableTempFieldNumber = 2,
    kMinTolerableTempFieldNumber = 3,
    kCurrentTempFieldNumber = 4,
  };
  // .bestia.messages.Component component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::bestia::messages::Component& component() const;
  ::bestia::messages::Component* release_component();
  ::bestia::messages::Component* mutable_component();
  void set_allocated_component(::bestia::messages::Component* component);
  private:
  const ::bestia::messages::Component& _internal_component() const;
  ::bestia::messages::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::bestia::messages::Component* component);
  ::bestia::messages::Component* unsafe_arena_release_component();

  // int32 max_tolerable_temp = 2;
  void clear_max_tolerable_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_tolerable_temp() const;
  void set_max_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_tolerable_temp() const;
  void _internal_set_max_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_tolerable_temp = 3;
  void clear_min_tolerable_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 min_tolerable_temp() const;
  void set_min_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_tolerable_temp() const;
  void _internal_set_min_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_temp = 4;
  void clear_current_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 current_temp() const;
  void set_current_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_temp() const;
  void _internal_set_current_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.TemperatureComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Component* component_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_tolerable_temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_tolerable_temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_temp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fcomponent_2eproto;
};
// -------------------------------------------------------------------

class VisualComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.VisualComponent) */ {
 public:
  inline VisualComponent() : VisualComponent(nullptr) {};
  virtual ~VisualComponent();

  VisualComponent(const VisualComponent& from);
  VisualComponent(VisualComponent&& from) noexcept
    : VisualComponent() {
    *this = ::std::move(from);
  }

  inline VisualComponent& operator=(const VisualComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualComponent& operator=(VisualComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisualComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualComponent* internal_default_instance() {
    return reinterpret_cast<const VisualComponent*>(
               &_VisualComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VisualComponent& a, VisualComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisualComponent* New() const final {
    return CreateMaybeMessage<VisualComponent>(nullptr);
  }

  VisualComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisualComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisualComponent& from);
  void MergeFrom(const VisualComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.VisualComponent";
  }
  protected:
  explicit VisualComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fcomponent_2eproto);
    return ::descriptor_table_messages_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisualFieldNumber = 2,
    kComponentFieldNumber = 1,
  };
  // string visual = 2;
  void clear_visual();
  const std::string& visual() const;
  void set_visual(const std::string& value);
  void set_visual(std::string&& value);
  void set_visual(const char* value);
  void set_visual(const char* value, size_t size);
  std::string* mutable_visual();
  std::string* release_visual();
  void set_allocated_visual(std::string* visual);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_visual();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_visual(
      std::string* visual);
  private:
  const std::string& _internal_visual() const;
  void _internal_set_visual(const std::string& value);
  std::string* _internal_mutable_visual();
  public:

  // .bestia.messages.Component component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::bestia::messages::Component& component() const;
  ::bestia::messages::Component* release_component();
  ::bestia::messages::Component* mutable_component();
  void set_allocated_component(::bestia::messages::Component* component);
  private:
  const ::bestia::messages::Component& _internal_component() const;
  ::bestia::messages::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::bestia::messages::Component* component);
  ::bestia::messages::Component* unsafe_arena_release_component();

  // @@protoc_insertion_point(class_scope:bestia.messages.VisualComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visual_;
  ::bestia::messages::Component* component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fcomponent_2eproto;
};
// -------------------------------------------------------------------

class StatusComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bestia.messages.StatusComponent) */ {
 public:
  inline StatusComponent() : StatusComponent(nullptr) {};
  virtual ~StatusComponent();

  StatusComponent(const StatusComponent& from);
  StatusComponent(StatusComponent&& from) noexcept
    : StatusComponent() {
    *this = ::std::move(from);
  }

  inline StatusComponent& operator=(const StatusComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusComponent& operator=(StatusComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusComponent* internal_default_instance() {
    return reinterpret_cast<const StatusComponent*>(
               &_StatusComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatusComponent& a, StatusComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusComponent* New() const final {
    return CreateMaybeMessage<StatusComponent>(nullptr);
  }

  StatusComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusComponent& from);
  void MergeFrom(const StatusComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bestia.messages.StatusComponent";
  }
  protected:
  explicit StatusComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fcomponent_2eproto);
    return ::descriptor_table_messages_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kPhysicalDefenseFieldNumber = 2,
    kMagicDefenseFieldNumber = 3,
    kStrengthFieldNumber = 4,
    kVitalityFieldNumber = 5,
    kIntelligenceFieldNumber = 6,
    kAgilityFieldNumber = 7,
    kWillpowerFieldNumber = 8,
    kDexterityFieldNumber = 9,
    kHpRegenRateFieldNumber = 10,
    kManaRegenRateFieldNumber = 11,
    kStaminaRegenRateFieldNumber = 12,
    kCriticalHitrateFieldNumber = 13,
    kDodgeFieldNumber = 14,
    kCasttimeModFieldNumber = 15,
    kCooldownModFieldNumber = 16,
    kSpellDurationModFieldNumber = 17,
    kHitrateFieldNumber = 18,
    kAttackSpeedFieldNumber = 19,
    kWalkspeedFieldNumber = 20,
    kElementFieldNumber = 21,
  };
  // .bestia.messages.Component component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::bestia::messages::Component& component() const;
  ::bestia::messages::Component* release_component();
  ::bestia::messages::Component* mutable_component();
  void set_allocated_component(::bestia::messages::Component* component);
  private:
  const ::bestia::messages::Component& _internal_component() const;
  ::bestia::messages::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::bestia::messages::Component* component);
  ::bestia::messages::Component* unsafe_arena_release_component();

  // int32 physical_defense = 2;
  void clear_physical_defense();
  ::PROTOBUF_NAMESPACE_ID::int32 physical_defense() const;
  void set_physical_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_physical_defense() const;
  void _internal_set_physical_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magic_defense = 3;
  void clear_magic_defense();
  ::PROTOBUF_NAMESPACE_ID::int32 magic_defense() const;
  void set_magic_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magic_defense() const;
  void _internal_set_magic_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strength = 4;
  void clear_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 strength() const;
  void set_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strength() const;
  void _internal_set_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vitality = 5;
  void clear_vitality();
  ::PROTOBUF_NAMESPACE_ID::int32 vitality() const;
  void set_vitality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vitality() const;
  void _internal_set_vitality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 intelligence = 6;
  void clear_intelligence();
  ::PROTOBUF_NAMESPACE_ID::int32 intelligence() const;
  void set_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intelligence() const;
  void _internal_set_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 agility = 7;
  void clear_agility();
  ::PROTOBUF_NAMESPACE_ID::int32 agility() const;
  void set_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agility() const;
  void _internal_set_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 willpower = 8;
  void clear_willpower();
  ::PROTOBUF_NAMESPACE_ID::int32 willpower() const;
  void set_willpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_willpower() const;
  void _internal_set_willpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dexterity = 9;
  void clear_dexterity();
  ::PROTOBUF_NAMESPACE_ID::int32 dexterity() const;
  void set_dexterity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dexterity() const;
  void _internal_set_dexterity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hp_regen_rate = 10;
  void clear_hp_regen_rate();
  float hp_regen_rate() const;
  void set_hp_regen_rate(float value);
  private:
  float _internal_hp_regen_rate() const;
  void _internal_set_hp_regen_rate(float value);
  public:

  // float mana_regen_rate = 11;
  void clear_mana_regen_rate();
  float mana_regen_rate() const;
  void set_mana_regen_rate(float value);
  private:
  float _internal_mana_regen_rate() const;
  void _internal_set_mana_regen_rate(float value);
  public:

  // float stamina_regen_rate = 12;
  void clear_stamina_regen_rate();
  float stamina_regen_rate() const;
  void set_stamina_regen_rate(float value);
  private:
  float _internal_stamina_regen_rate() const;
  void _internal_set_stamina_regen_rate(float value);
  public:

  // float critical_hitrate = 13;
  void clear_critical_hitrate();
  float critical_hitrate() const;
  void set_critical_hitrate(float value);
  private:
  float _internal_critical_hitrate() const;
  void _internal_set_critical_hitrate(float value);
  public:

  // float dodge = 14;
  void clear_dodge();
  float dodge() const;
  void set_dodge(float value);
  private:
  float _internal_dodge() const;
  void _internal_set_dodge(float value);
  public:

  // float casttime_mod = 15;
  void clear_casttime_mod();
  float casttime_mod() const;
  void set_casttime_mod(float value);
  private:
  float _internal_casttime_mod() const;
  void _internal_set_casttime_mod(float value);
  public:

  // float cooldown_mod = 16;
  void clear_cooldown_mod();
  float cooldown_mod() const;
  void set_cooldown_mod(float value);
  private:
  float _internal_cooldown_mod() const;
  void _internal_set_cooldown_mod(float value);
  public:

  // float spell_duration_mod = 17;
  void clear_spell_duration_mod();
  float spell_duration_mod() const;
  void set_spell_duration_mod(float value);
  private:
  float _internal_spell_duration_mod() const;
  void _internal_set_spell_duration_mod(float value);
  public:

  // float hitrate = 18;
  void clear_hitrate();
  float hitrate() const;
  void set_hitrate(float value);
  private:
  float _internal_hitrate() const;
  void _internal_set_hitrate(float value);
  public:

  // float attack_speed = 19;
  void clear_attack_speed();
  float attack_speed() const;
  void set_attack_speed(float value);
  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);
  public:

  // float walkspeed = 20;
  void clear_walkspeed();
  float walkspeed() const;
  void set_walkspeed(float value);
  private:
  float _internal_walkspeed() const;
  void _internal_set_walkspeed(float value);
  public:

  // .bestia.messages.Element element = 21;
  void clear_element();
  ::bestia::messages::Element element() const;
  void set_element(::bestia::messages::Element value);
  private:
  ::bestia::messages::Element _internal_element() const;
  void _internal_set_element(::bestia::messages::Element value);
  public:

  // @@protoc_insertion_point(class_scope:bestia.messages.StatusComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bestia::messages::Component* component_;
  ::PROTOBUF_NAMESPACE_ID::int32 physical_defense_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_defense_;
  ::PROTOBUF_NAMESPACE_ID::int32 strength_;
  ::PROTOBUF_NAMESPACE_ID::int32 vitality_;
  ::PROTOBUF_NAMESPACE_ID::int32 intelligence_;
  ::PROTOBUF_NAMESPACE_ID::int32 agility_;
  ::PROTOBUF_NAMESPACE_ID::int32 willpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 dexterity_;
  float hp_regen_rate_;
  float mana_regen_rate_;
  float stamina_regen_rate_;
  float critical_hitrate_;
  float dodge_;
  float casttime_mod_;
  float cooldown_mod_;
  float spell_duration_mod_;
  float hitrate_;
  float attack_speed_;
  float walkspeed_;
  int element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fcomponent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// int64 entity_id = 1;
inline void Component::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Component::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Component::entity_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.Component.entity_id)
  return _internal_entity_id();
}
inline void Component::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void Component::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.Component.entity_id)
}

// int64 component_id = 2;
inline void Component::clear_component_id() {
  component_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Component::_internal_component_id() const {
  return component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Component::component_id() const {
  // @@protoc_insertion_point(field_get:bestia.messages.Component.component_id)
  return _internal_component_id();
}
inline void Component::_internal_set_component_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  component_id_ = value;
}
inline void Component::set_component_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:bestia.messages.Component.component_id)
}

// -------------------------------------------------------------------

// PositionComponent

// .bestia.messages.Component component = 1;
inline bool PositionComponent::_internal_has_component() const {
  return this != internal_default_instance() && component_ != nullptr;
}
inline bool PositionComponent::has_component() const {
  return _internal_has_component();
}
inline void PositionComponent::clear_component() {
  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
}
inline const ::bestia::messages::Component& PositionComponent::_internal_component() const {
  const ::bestia::messages::Component* p = component_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Component*>(
      &::bestia::messages::_Component_default_instance_);
}
inline const ::bestia::messages::Component& PositionComponent::component() const {
  // @@protoc_insertion_point(field_get:bestia.messages.PositionComponent.component)
  return _internal_component();
}
inline void PositionComponent::unsafe_arena_set_allocated_component(
    ::bestia::messages::Component* component) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  component_ = component;
  if (component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.PositionComponent.component)
}
inline ::bestia::messages::Component* PositionComponent::release_component() {
  auto temp = unsafe_arena_release_component();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Component* PositionComponent::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:bestia.messages.PositionComponent.component)
  
  ::bestia::messages::Component* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::bestia::messages::Component* PositionComponent::_internal_mutable_component() {
  
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Component>(GetArena());
    component_ = p;
  }
  return component_;
}
inline ::bestia::messages::Component* PositionComponent::mutable_component() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.PositionComponent.component)
  return _internal_mutable_component();
}
inline void PositionComponent::set_allocated_component(::bestia::messages::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete component_;
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    
  } else {
    
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.PositionComponent.component)
}

// .bestia.messages.Vec3 position = 2;
inline bool PositionComponent::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionComponent::has_position() const {
  return _internal_has_position();
}
inline const ::bestia::messages::Vec3& PositionComponent::_internal_position() const {
  const ::bestia::messages::Vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Vec3*>(
      &::bestia::messages::_Vec3_default_instance_);
}
inline const ::bestia::messages::Vec3& PositionComponent::position() const {
  // @@protoc_insertion_point(field_get:bestia.messages.PositionComponent.position)
  return _internal_position();
}
inline void PositionComponent::unsafe_arena_set_allocated_position(
    ::bestia::messages::Vec3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.PositionComponent.position)
}
inline ::bestia::messages::Vec3* PositionComponent::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Vec3* PositionComponent::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:bestia.messages.PositionComponent.position)
  
  ::bestia::messages::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::bestia::messages::Vec3* PositionComponent::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Vec3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::bestia::messages::Vec3* PositionComponent::mutable_position() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.PositionComponent.position)
  return _internal_mutable_position();
}
inline void PositionComponent::set_allocated_position(::bestia::messages::Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.PositionComponent.position)
}

// -------------------------------------------------------------------

// TemperatureComponent

// .bestia.messages.Component component = 1;
inline bool TemperatureComponent::_internal_has_component() const {
  return this != internal_default_instance() && component_ != nullptr;
}
inline bool TemperatureComponent::has_component() const {
  return _internal_has_component();
}
inline void TemperatureComponent::clear_component() {
  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
}
inline const ::bestia::messages::Component& TemperatureComponent::_internal_component() const {
  const ::bestia::messages::Component* p = component_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Component*>(
      &::bestia::messages::_Component_default_instance_);
}
inline const ::bestia::messages::Component& TemperatureComponent::component() const {
  // @@protoc_insertion_point(field_get:bestia.messages.TemperatureComponent.component)
  return _internal_component();
}
inline void TemperatureComponent::unsafe_arena_set_allocated_component(
    ::bestia::messages::Component* component) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  component_ = component;
  if (component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.TemperatureComponent.component)
}
inline ::bestia::messages::Component* TemperatureComponent::release_component() {
  auto temp = unsafe_arena_release_component();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Component* TemperatureComponent::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:bestia.messages.TemperatureComponent.component)
  
  ::bestia::messages::Component* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::bestia::messages::Component* TemperatureComponent::_internal_mutable_component() {
  
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Component>(GetArena());
    component_ = p;
  }
  return component_;
}
inline ::bestia::messages::Component* TemperatureComponent::mutable_component() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.TemperatureComponent.component)
  return _internal_mutable_component();
}
inline void TemperatureComponent::set_allocated_component(::bestia::messages::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete component_;
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    
  } else {
    
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.TemperatureComponent.component)
}

// int32 max_tolerable_temp = 2;
inline void TemperatureComponent::clear_max_tolerable_temp() {
  max_tolerable_temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::_internal_max_tolerable_temp() const {
  return max_tolerable_temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::max_tolerable_temp() const {
  // @@protoc_insertion_point(field_get:bestia.messages.TemperatureComponent.max_tolerable_temp)
  return _internal_max_tolerable_temp();
}
inline void TemperatureComponent::_internal_set_max_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_tolerable_temp_ = value;
}
inline void TemperatureComponent::set_max_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_tolerable_temp(value);
  // @@protoc_insertion_point(field_set:bestia.messages.TemperatureComponent.max_tolerable_temp)
}

// int32 min_tolerable_temp = 3;
inline void TemperatureComponent::clear_min_tolerable_temp() {
  min_tolerable_temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::_internal_min_tolerable_temp() const {
  return min_tolerable_temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::min_tolerable_temp() const {
  // @@protoc_insertion_point(field_get:bestia.messages.TemperatureComponent.min_tolerable_temp)
  return _internal_min_tolerable_temp();
}
inline void TemperatureComponent::_internal_set_min_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_tolerable_temp_ = value;
}
inline void TemperatureComponent::set_min_tolerable_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_tolerable_temp(value);
  // @@protoc_insertion_point(field_set:bestia.messages.TemperatureComponent.min_tolerable_temp)
}

// int32 current_temp = 4;
inline void TemperatureComponent::clear_current_temp() {
  current_temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::_internal_current_temp() const {
  return current_temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TemperatureComponent::current_temp() const {
  // @@protoc_insertion_point(field_get:bestia.messages.TemperatureComponent.current_temp)
  return _internal_current_temp();
}
inline void TemperatureComponent::_internal_set_current_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_temp_ = value;
}
inline void TemperatureComponent::set_current_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_temp(value);
  // @@protoc_insertion_point(field_set:bestia.messages.TemperatureComponent.current_temp)
}

// -------------------------------------------------------------------

// VisualComponent

// .bestia.messages.Component component = 1;
inline bool VisualComponent::_internal_has_component() const {
  return this != internal_default_instance() && component_ != nullptr;
}
inline bool VisualComponent::has_component() const {
  return _internal_has_component();
}
inline void VisualComponent::clear_component() {
  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
}
inline const ::bestia::messages::Component& VisualComponent::_internal_component() const {
  const ::bestia::messages::Component* p = component_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Component*>(
      &::bestia::messages::_Component_default_instance_);
}
inline const ::bestia::messages::Component& VisualComponent::component() const {
  // @@protoc_insertion_point(field_get:bestia.messages.VisualComponent.component)
  return _internal_component();
}
inline void VisualComponent::unsafe_arena_set_allocated_component(
    ::bestia::messages::Component* component) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  component_ = component;
  if (component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.VisualComponent.component)
}
inline ::bestia::messages::Component* VisualComponent::release_component() {
  auto temp = unsafe_arena_release_component();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Component* VisualComponent::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:bestia.messages.VisualComponent.component)
  
  ::bestia::messages::Component* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::bestia::messages::Component* VisualComponent::_internal_mutable_component() {
  
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Component>(GetArena());
    component_ = p;
  }
  return component_;
}
inline ::bestia::messages::Component* VisualComponent::mutable_component() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.VisualComponent.component)
  return _internal_mutable_component();
}
inline void VisualComponent::set_allocated_component(::bestia::messages::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete component_;
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    
  } else {
    
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.VisualComponent.component)
}

// string visual = 2;
inline void VisualComponent::clear_visual() {
  visual_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VisualComponent::visual() const {
  // @@protoc_insertion_point(field_get:bestia.messages.VisualComponent.visual)
  return _internal_visual();
}
inline void VisualComponent::set_visual(const std::string& value) {
  _internal_set_visual(value);
  // @@protoc_insertion_point(field_set:bestia.messages.VisualComponent.visual)
}
inline std::string* VisualComponent::mutable_visual() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.VisualComponent.visual)
  return _internal_mutable_visual();
}
inline const std::string& VisualComponent::_internal_visual() const {
  return visual_.Get();
}
inline void VisualComponent::_internal_set_visual(const std::string& value) {
  
  visual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VisualComponent::set_visual(std::string&& value) {
  
  visual_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bestia.messages.VisualComponent.visual)
}
inline void VisualComponent::set_visual(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  visual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bestia.messages.VisualComponent.visual)
}
inline void VisualComponent::set_visual(const char* value,
    size_t size) {
  
  visual_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bestia.messages.VisualComponent.visual)
}
inline std::string* VisualComponent::_internal_mutable_visual() {
  
  return visual_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VisualComponent::release_visual() {
  // @@protoc_insertion_point(field_release:bestia.messages.VisualComponent.visual)
  return visual_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisualComponent::set_allocated_visual(std::string* visual) {
  if (visual != nullptr) {
    
  } else {
    
  }
  visual_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visual,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.VisualComponent.visual)
}
inline std::string* VisualComponent::unsafe_arena_release_visual() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bestia.messages.VisualComponent.visual)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return visual_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VisualComponent::unsafe_arena_set_allocated_visual(
    std::string* visual) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (visual != nullptr) {
    
  } else {
    
  }
  visual_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      visual, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.VisualComponent.visual)
}

// -------------------------------------------------------------------

// StatusComponent

// .bestia.messages.Component component = 1;
inline bool StatusComponent::_internal_has_component() const {
  return this != internal_default_instance() && component_ != nullptr;
}
inline bool StatusComponent::has_component() const {
  return _internal_has_component();
}
inline void StatusComponent::clear_component() {
  if (GetArena() == nullptr && component_ != nullptr) {
    delete component_;
  }
  component_ = nullptr;
}
inline const ::bestia::messages::Component& StatusComponent::_internal_component() const {
  const ::bestia::messages::Component* p = component_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bestia::messages::Component*>(
      &::bestia::messages::_Component_default_instance_);
}
inline const ::bestia::messages::Component& StatusComponent::component() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.component)
  return _internal_component();
}
inline void StatusComponent::unsafe_arena_set_allocated_component(
    ::bestia::messages::Component* component) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  component_ = component;
  if (component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bestia.messages.StatusComponent.component)
}
inline ::bestia::messages::Component* StatusComponent::release_component() {
  auto temp = unsafe_arena_release_component();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bestia::messages::Component* StatusComponent::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:bestia.messages.StatusComponent.component)
  
  ::bestia::messages::Component* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::bestia::messages::Component* StatusComponent::_internal_mutable_component() {
  
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::bestia::messages::Component>(GetArena());
    component_ = p;
  }
  return component_;
}
inline ::bestia::messages::Component* StatusComponent::mutable_component() {
  // @@protoc_insertion_point(field_mutable:bestia.messages.StatusComponent.component)
  return _internal_mutable_component();
}
inline void StatusComponent::set_allocated_component(::bestia::messages::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete component_;
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    
  } else {
    
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.StatusComponent.component)
}

// int32 physical_defense = 2;
inline void StatusComponent::clear_physical_defense() {
  physical_defense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_physical_defense() const {
  return physical_defense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::physical_defense() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.physical_defense)
  return _internal_physical_defense();
}
inline void StatusComponent::_internal_set_physical_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  physical_defense_ = value;
}
inline void StatusComponent::set_physical_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_physical_defense(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.physical_defense)
}

// int32 magic_defense = 3;
inline void StatusComponent::clear_magic_defense() {
  magic_defense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_magic_defense() const {
  return magic_defense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::magic_defense() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.magic_defense)
  return _internal_magic_defense();
}
inline void StatusComponent::_internal_set_magic_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_defense_ = value;
}
inline void StatusComponent::set_magic_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magic_defense(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.magic_defense)
}

// int32 strength = 4;
inline void StatusComponent::clear_strength() {
  strength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_strength() const {
  return strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::strength() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.strength)
  return _internal_strength();
}
inline void StatusComponent::_internal_set_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strength_ = value;
}
inline void StatusComponent::set_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.strength)
}

// int32 vitality = 5;
inline void StatusComponent::clear_vitality() {
  vitality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_vitality() const {
  return vitality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::vitality() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.vitality)
  return _internal_vitality();
}
inline void StatusComponent::_internal_set_vitality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vitality_ = value;
}
inline void StatusComponent::set_vitality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vitality(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.vitality)
}

// int32 intelligence = 6;
inline void StatusComponent::clear_intelligence() {
  intelligence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_intelligence() const {
  return intelligence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::intelligence() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.intelligence)
  return _internal_intelligence();
}
inline void StatusComponent::_internal_set_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intelligence_ = value;
}
inline void StatusComponent::set_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intelligence(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.intelligence)
}

// int32 agility = 7;
inline void StatusComponent::clear_agility() {
  agility_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_agility() const {
  return agility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::agility() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.agility)
  return _internal_agility();
}
inline void StatusComponent::_internal_set_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agility_ = value;
}
inline void StatusComponent::set_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agility(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.agility)
}

// int32 willpower = 8;
inline void StatusComponent::clear_willpower() {
  willpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_willpower() const {
  return willpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::willpower() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.willpower)
  return _internal_willpower();
}
inline void StatusComponent::_internal_set_willpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  willpower_ = value;
}
inline void StatusComponent::set_willpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_willpower(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.willpower)
}

// int32 dexterity = 9;
inline void StatusComponent::clear_dexterity() {
  dexterity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::_internal_dexterity() const {
  return dexterity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusComponent::dexterity() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.dexterity)
  return _internal_dexterity();
}
inline void StatusComponent::_internal_set_dexterity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dexterity_ = value;
}
inline void StatusComponent::set_dexterity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dexterity(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.dexterity)
}

// float hp_regen_rate = 10;
inline void StatusComponent::clear_hp_regen_rate() {
  hp_regen_rate_ = 0;
}
inline float StatusComponent::_internal_hp_regen_rate() const {
  return hp_regen_rate_;
}
inline float StatusComponent::hp_regen_rate() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.hp_regen_rate)
  return _internal_hp_regen_rate();
}
inline void StatusComponent::_internal_set_hp_regen_rate(float value) {
  
  hp_regen_rate_ = value;
}
inline void StatusComponent::set_hp_regen_rate(float value) {
  _internal_set_hp_regen_rate(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.hp_regen_rate)
}

// float mana_regen_rate = 11;
inline void StatusComponent::clear_mana_regen_rate() {
  mana_regen_rate_ = 0;
}
inline float StatusComponent::_internal_mana_regen_rate() const {
  return mana_regen_rate_;
}
inline float StatusComponent::mana_regen_rate() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.mana_regen_rate)
  return _internal_mana_regen_rate();
}
inline void StatusComponent::_internal_set_mana_regen_rate(float value) {
  
  mana_regen_rate_ = value;
}
inline void StatusComponent::set_mana_regen_rate(float value) {
  _internal_set_mana_regen_rate(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.mana_regen_rate)
}

// float stamina_regen_rate = 12;
inline void StatusComponent::clear_stamina_regen_rate() {
  stamina_regen_rate_ = 0;
}
inline float StatusComponent::_internal_stamina_regen_rate() const {
  return stamina_regen_rate_;
}
inline float StatusComponent::stamina_regen_rate() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.stamina_regen_rate)
  return _internal_stamina_regen_rate();
}
inline void StatusComponent::_internal_set_stamina_regen_rate(float value) {
  
  stamina_regen_rate_ = value;
}
inline void StatusComponent::set_stamina_regen_rate(float value) {
  _internal_set_stamina_regen_rate(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.stamina_regen_rate)
}

// float critical_hitrate = 13;
inline void StatusComponent::clear_critical_hitrate() {
  critical_hitrate_ = 0;
}
inline float StatusComponent::_internal_critical_hitrate() const {
  return critical_hitrate_;
}
inline float StatusComponent::critical_hitrate() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.critical_hitrate)
  return _internal_critical_hitrate();
}
inline void StatusComponent::_internal_set_critical_hitrate(float value) {
  
  critical_hitrate_ = value;
}
inline void StatusComponent::set_critical_hitrate(float value) {
  _internal_set_critical_hitrate(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.critical_hitrate)
}

// float dodge = 14;
inline void StatusComponent::clear_dodge() {
  dodge_ = 0;
}
inline float StatusComponent::_internal_dodge() const {
  return dodge_;
}
inline float StatusComponent::dodge() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.dodge)
  return _internal_dodge();
}
inline void StatusComponent::_internal_set_dodge(float value) {
  
  dodge_ = value;
}
inline void StatusComponent::set_dodge(float value) {
  _internal_set_dodge(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.dodge)
}

// float casttime_mod = 15;
inline void StatusComponent::clear_casttime_mod() {
  casttime_mod_ = 0;
}
inline float StatusComponent::_internal_casttime_mod() const {
  return casttime_mod_;
}
inline float StatusComponent::casttime_mod() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.casttime_mod)
  return _internal_casttime_mod();
}
inline void StatusComponent::_internal_set_casttime_mod(float value) {
  
  casttime_mod_ = value;
}
inline void StatusComponent::set_casttime_mod(float value) {
  _internal_set_casttime_mod(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.casttime_mod)
}

// float cooldown_mod = 16;
inline void StatusComponent::clear_cooldown_mod() {
  cooldown_mod_ = 0;
}
inline float StatusComponent::_internal_cooldown_mod() const {
  return cooldown_mod_;
}
inline float StatusComponent::cooldown_mod() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.cooldown_mod)
  return _internal_cooldown_mod();
}
inline void StatusComponent::_internal_set_cooldown_mod(float value) {
  
  cooldown_mod_ = value;
}
inline void StatusComponent::set_cooldown_mod(float value) {
  _internal_set_cooldown_mod(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.cooldown_mod)
}

// float spell_duration_mod = 17;
inline void StatusComponent::clear_spell_duration_mod() {
  spell_duration_mod_ = 0;
}
inline float StatusComponent::_internal_spell_duration_mod() const {
  return spell_duration_mod_;
}
inline float StatusComponent::spell_duration_mod() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.spell_duration_mod)
  return _internal_spell_duration_mod();
}
inline void StatusComponent::_internal_set_spell_duration_mod(float value) {
  
  spell_duration_mod_ = value;
}
inline void StatusComponent::set_spell_duration_mod(float value) {
  _internal_set_spell_duration_mod(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.spell_duration_mod)
}

// float hitrate = 18;
inline void StatusComponent::clear_hitrate() {
  hitrate_ = 0;
}
inline float StatusComponent::_internal_hitrate() const {
  return hitrate_;
}
inline float StatusComponent::hitrate() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.hitrate)
  return _internal_hitrate();
}
inline void StatusComponent::_internal_set_hitrate(float value) {
  
  hitrate_ = value;
}
inline void StatusComponent::set_hitrate(float value) {
  _internal_set_hitrate(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.hitrate)
}

// float attack_speed = 19;
inline void StatusComponent::clear_attack_speed() {
  attack_speed_ = 0;
}
inline float StatusComponent::_internal_attack_speed() const {
  return attack_speed_;
}
inline float StatusComponent::attack_speed() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.attack_speed)
  return _internal_attack_speed();
}
inline void StatusComponent::_internal_set_attack_speed(float value) {
  
  attack_speed_ = value;
}
inline void StatusComponent::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.attack_speed)
}

// float walkspeed = 20;
inline void StatusComponent::clear_walkspeed() {
  walkspeed_ = 0;
}
inline float StatusComponent::_internal_walkspeed() const {
  return walkspeed_;
}
inline float StatusComponent::walkspeed() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.walkspeed)
  return _internal_walkspeed();
}
inline void StatusComponent::_internal_set_walkspeed(float value) {
  
  walkspeed_ = value;
}
inline void StatusComponent::set_walkspeed(float value) {
  _internal_set_walkspeed(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.walkspeed)
}

// .bestia.messages.Element element = 21;
inline void StatusComponent::clear_element() {
  element_ = 0;
}
inline ::bestia::messages::Element StatusComponent::_internal_element() const {
  return static_cast< ::bestia::messages::Element >(element_);
}
inline ::bestia::messages::Element StatusComponent::element() const {
  // @@protoc_insertion_point(field_get:bestia.messages.StatusComponent.element)
  return _internal_element();
}
inline void StatusComponent::_internal_set_element(::bestia::messages::Element value) {
  
  element_ = value;
}
inline void StatusComponent::set_element(::bestia::messages::Element value) {
  _internal_set_element(value);
  // @@protoc_insertion_point(field_set:bestia.messages.StatusComponent.element)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace bestia

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fcomponent_2eproto
