// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: default.proto

#include "default.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountVarRequest_messages_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountVarResponse_messages_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2faccount_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Auth_messages_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2finventory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropItem_messages_2finventory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2finventory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PickupItem_messages_2finventory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionComponent_messages_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TemperatureComponent_messages_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2finventory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UseItem_messages_2finventory_2eproto;
namespace bestia {
namespace messages {
class WrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wrapper> _instance;
  const ::bestia::messages::Auth* auth_;
  const ::bestia::messages::AccountVarRequest* account_var_request_;
  const ::bestia::messages::AccountVarResponse* account_var_response_;
  const ::bestia::messages::UseItem* cmd_use_item_;
  const ::bestia::messages::DropItem* cmd_drop_item_;
  const ::bestia::messages::PickupItem* cmd_pickup_item_;
  const ::bestia::messages::PositionComponent* comp_position_;
  const ::bestia::messages::TemperatureComponent* comp_temperature_;
} _Wrapper_default_instance_;
}  // namespace messages
}  // namespace bestia
static void InitDefaultsscc_info_Wrapper_default_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bestia::messages::_Wrapper_default_instance_;
    new (ptr) ::bestia::messages::Wrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bestia::messages::Wrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Wrapper_default_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Wrapper_default_2eproto}, {
      &scc_info_Auth_messages_2faccount_2eproto.base,
      &scc_info_AccountVarRequest_messages_2faccount_2eproto.base,
      &scc_info_AccountVarResponse_messages_2faccount_2eproto.base,
      &scc_info_UseItem_messages_2finventory_2eproto.base,
      &scc_info_DropItem_messages_2finventory_2eproto.base,
      &scc_info_PickupItem_messages_2finventory_2eproto.base,
      &scc_info_PositionComponent_messages_2fcomponent_2eproto.base,
      &scc_info_TemperatureComponent_messages_2fcomponent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_default_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_default_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_default_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_default_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Wrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Wrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, auth_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, account_var_request_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, account_var_response_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, cmd_use_item_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, cmd_drop_item_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, cmd_pickup_item_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, comp_position_),
  offsetof(::bestia::messages::WrapperDefaultTypeInternal, comp_temperature_),
  PROTOBUF_FIELD_OFFSET(::bestia::messages::Wrapper, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bestia::messages::Wrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bestia::messages::_Wrapper_default_instance_),
};

const char descriptor_table_protodef_default_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdefault.proto\022\017bestia.messages\032\026messag"
  "es/account.proto\032\030messages/inventory.pro"
  "to\032\030messages/component.proto\"\343\003\n\007Wrapper"
  "\022%\n\004auth\030\001 \001(\0132\025.bestia.messages.AuthH\000\022"
  "A\n\023account_var_request\030\002 \001(\0132\".bestia.me"
  "ssages.AccountVarRequestH\000\022C\n\024account_va"
  "r_response\030\003 \001(\0132#.bestia.messages.Accou"
  "ntVarResponseH\000\0220\n\014cmd_use_item\030d \001(\0132\030."
  "bestia.messages.UseItemH\000\0222\n\rcmd_drop_it"
  "em\030e \001(\0132\031.bestia.messages.DropItemH\000\0226\n"
  "\017cmd_pickup_item\030f \001(\0132\033.bestia.messages"
  ".PickupItemH\000\022<\n\rcomp_position\030\254\002 \001(\0132\"."
  "bestia.messages.PositionComponentH\000\022B\n\020c"
  "omp_temperature\030\255\002 \001(\0132%.bestia.messages"
  ".TemperatureComponentH\000B\t\n\007payloadB*\n\031ne"
  "t.bestia.messages.protoB\rMessageProtosb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_default_2eproto_deps[3] = {
  &::descriptor_table_messages_2faccount_2eproto,
  &::descriptor_table_messages_2fcomponent_2eproto,
  &::descriptor_table_messages_2finventory_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_default_2eproto_sccs[1] = {
  &scc_info_Wrapper_default_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_default_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_default_2eproto = {
  false, false, descriptor_table_protodef_default_2eproto, "default.proto", 646,
  &descriptor_table_default_2eproto_once, descriptor_table_default_2eproto_sccs, descriptor_table_default_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_default_2eproto::offsets,
  file_level_metadata_default_2eproto, 1, file_level_enum_descriptors_default_2eproto, file_level_service_descriptors_default_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_default_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_default_2eproto)), true);
namespace bestia {
namespace messages {

// ===================================================================

void Wrapper::InitAsDefaultInstance() {
  ::bestia::messages::_Wrapper_default_instance_.auth_ = const_cast< ::bestia::messages::Auth*>(
      ::bestia::messages::Auth::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.account_var_request_ = const_cast< ::bestia::messages::AccountVarRequest*>(
      ::bestia::messages::AccountVarRequest::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.account_var_response_ = const_cast< ::bestia::messages::AccountVarResponse*>(
      ::bestia::messages::AccountVarResponse::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.cmd_use_item_ = const_cast< ::bestia::messages::UseItem*>(
      ::bestia::messages::UseItem::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.cmd_drop_item_ = const_cast< ::bestia::messages::DropItem*>(
      ::bestia::messages::DropItem::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.cmd_pickup_item_ = const_cast< ::bestia::messages::PickupItem*>(
      ::bestia::messages::PickupItem::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.comp_position_ = const_cast< ::bestia::messages::PositionComponent*>(
      ::bestia::messages::PositionComponent::internal_default_instance());
  ::bestia::messages::_Wrapper_default_instance_.comp_temperature_ = const_cast< ::bestia::messages::TemperatureComponent*>(
      ::bestia::messages::TemperatureComponent::internal_default_instance());
}
class Wrapper::_Internal {
 public:
  static const ::bestia::messages::Auth& auth(const Wrapper* msg);
  static const ::bestia::messages::AccountVarRequest& account_var_request(const Wrapper* msg);
  static const ::bestia::messages::AccountVarResponse& account_var_response(const Wrapper* msg);
  static const ::bestia::messages::UseItem& cmd_use_item(const Wrapper* msg);
  static const ::bestia::messages::DropItem& cmd_drop_item(const Wrapper* msg);
  static const ::bestia::messages::PickupItem& cmd_pickup_item(const Wrapper* msg);
  static const ::bestia::messages::PositionComponent& comp_position(const Wrapper* msg);
  static const ::bestia::messages::TemperatureComponent& comp_temperature(const Wrapper* msg);
};

const ::bestia::messages::Auth&
Wrapper::_Internal::auth(const Wrapper* msg) {
  return *msg->payload_.auth_;
}
const ::bestia::messages::AccountVarRequest&
Wrapper::_Internal::account_var_request(const Wrapper* msg) {
  return *msg->payload_.account_var_request_;
}
const ::bestia::messages::AccountVarResponse&
Wrapper::_Internal::account_var_response(const Wrapper* msg) {
  return *msg->payload_.account_var_response_;
}
const ::bestia::messages::UseItem&
Wrapper::_Internal::cmd_use_item(const Wrapper* msg) {
  return *msg->payload_.cmd_use_item_;
}
const ::bestia::messages::DropItem&
Wrapper::_Internal::cmd_drop_item(const Wrapper* msg) {
  return *msg->payload_.cmd_drop_item_;
}
const ::bestia::messages::PickupItem&
Wrapper::_Internal::cmd_pickup_item(const Wrapper* msg) {
  return *msg->payload_.cmd_pickup_item_;
}
const ::bestia::messages::PositionComponent&
Wrapper::_Internal::comp_position(const Wrapper* msg) {
  return *msg->payload_.comp_position_;
}
const ::bestia::messages::TemperatureComponent&
Wrapper::_Internal::comp_temperature(const Wrapper* msg) {
  return *msg->payload_.comp_temperature_;
}
void Wrapper::set_allocated_auth(::bestia::messages::Auth* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth)->GetArena();
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    set_has_auth();
    payload_.auth_ = auth;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.auth)
}
void Wrapper::clear_auth() {
  if (_internal_has_auth()) {
    if (GetArena() == nullptr) {
      delete payload_.auth_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_account_var_request(::bestia::messages::AccountVarRequest* account_var_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (account_var_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_var_request)->GetArena();
    if (message_arena != submessage_arena) {
      account_var_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_var_request, submessage_arena);
    }
    set_has_account_var_request();
    payload_.account_var_request_ = account_var_request;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.account_var_request)
}
void Wrapper::clear_account_var_request() {
  if (_internal_has_account_var_request()) {
    if (GetArena() == nullptr) {
      delete payload_.account_var_request_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_account_var_response(::bestia::messages::AccountVarResponse* account_var_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (account_var_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_var_response)->GetArena();
    if (message_arena != submessage_arena) {
      account_var_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_var_response, submessage_arena);
    }
    set_has_account_var_response();
    payload_.account_var_response_ = account_var_response;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.account_var_response)
}
void Wrapper::clear_account_var_response() {
  if (_internal_has_account_var_response()) {
    if (GetArena() == nullptr) {
      delete payload_.account_var_response_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_cmd_use_item(::bestia::messages::UseItem* cmd_use_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (cmd_use_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_use_item)->GetArena();
    if (message_arena != submessage_arena) {
      cmd_use_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_use_item, submessage_arena);
    }
    set_has_cmd_use_item();
    payload_.cmd_use_item_ = cmd_use_item;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.cmd_use_item)
}
void Wrapper::clear_cmd_use_item() {
  if (_internal_has_cmd_use_item()) {
    if (GetArena() == nullptr) {
      delete payload_.cmd_use_item_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_cmd_drop_item(::bestia::messages::DropItem* cmd_drop_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (cmd_drop_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_drop_item)->GetArena();
    if (message_arena != submessage_arena) {
      cmd_drop_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_drop_item, submessage_arena);
    }
    set_has_cmd_drop_item();
    payload_.cmd_drop_item_ = cmd_drop_item;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.cmd_drop_item)
}
void Wrapper::clear_cmd_drop_item() {
  if (_internal_has_cmd_drop_item()) {
    if (GetArena() == nullptr) {
      delete payload_.cmd_drop_item_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_cmd_pickup_item(::bestia::messages::PickupItem* cmd_pickup_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (cmd_pickup_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_pickup_item)->GetArena();
    if (message_arena != submessage_arena) {
      cmd_pickup_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_pickup_item, submessage_arena);
    }
    set_has_cmd_pickup_item();
    payload_.cmd_pickup_item_ = cmd_pickup_item;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.cmd_pickup_item)
}
void Wrapper::clear_cmd_pickup_item() {
  if (_internal_has_cmd_pickup_item()) {
    if (GetArena() == nullptr) {
      delete payload_.cmd_pickup_item_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_comp_position(::bestia::messages::PositionComponent* comp_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (comp_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comp_position)->GetArena();
    if (message_arena != submessage_arena) {
      comp_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comp_position, submessage_arena);
    }
    set_has_comp_position();
    payload_.comp_position_ = comp_position;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.comp_position)
}
void Wrapper::clear_comp_position() {
  if (_internal_has_comp_position()) {
    if (GetArena() == nullptr) {
      delete payload_.comp_position_;
    }
    clear_has_payload();
  }
}
void Wrapper::set_allocated_comp_temperature(::bestia::messages::TemperatureComponent* comp_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (comp_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comp_temperature)->GetArena();
    if (message_arena != submessage_arena) {
      comp_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comp_temperature, submessage_arena);
    }
    set_has_comp_temperature();
    payload_.comp_temperature_ = comp_temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:bestia.messages.Wrapper.comp_temperature)
}
void Wrapper::clear_comp_temperature() {
  if (_internal_has_comp_temperature()) {
    if (GetArena() == nullptr) {
      delete payload_.comp_temperature_;
    }
    clear_has_payload();
  }
}
Wrapper::Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bestia.messages.Wrapper)
}
Wrapper::Wrapper(const Wrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kAuth: {
      _internal_mutable_auth()->::bestia::messages::Auth::MergeFrom(from._internal_auth());
      break;
    }
    case kAccountVarRequest: {
      _internal_mutable_account_var_request()->::bestia::messages::AccountVarRequest::MergeFrom(from._internal_account_var_request());
      break;
    }
    case kAccountVarResponse: {
      _internal_mutable_account_var_response()->::bestia::messages::AccountVarResponse::MergeFrom(from._internal_account_var_response());
      break;
    }
    case kCmdUseItem: {
      _internal_mutable_cmd_use_item()->::bestia::messages::UseItem::MergeFrom(from._internal_cmd_use_item());
      break;
    }
    case kCmdDropItem: {
      _internal_mutable_cmd_drop_item()->::bestia::messages::DropItem::MergeFrom(from._internal_cmd_drop_item());
      break;
    }
    case kCmdPickupItem: {
      _internal_mutable_cmd_pickup_item()->::bestia::messages::PickupItem::MergeFrom(from._internal_cmd_pickup_item());
      break;
    }
    case kCompPosition: {
      _internal_mutable_comp_position()->::bestia::messages::PositionComponent::MergeFrom(from._internal_comp_position());
      break;
    }
    case kCompTemperature: {
      _internal_mutable_comp_temperature()->::bestia::messages::TemperatureComponent::MergeFrom(from._internal_comp_temperature());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bestia.messages.Wrapper)
}

void Wrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wrapper_default_2eproto.base);
  clear_has_payload();
}

Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:bestia.messages.Wrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Wrapper::ArenaDtor(void* object) {
  Wrapper* _this = reinterpret_cast< Wrapper* >(object);
  (void)_this;
}
void Wrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wrapper& Wrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wrapper_default_2eproto.base);
  return *internal_default_instance();
}


void Wrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:bestia.messages.Wrapper)
  switch (payload_case()) {
    case kAuth: {
      if (GetArena() == nullptr) {
        delete payload_.auth_;
      }
      break;
    }
    case kAccountVarRequest: {
      if (GetArena() == nullptr) {
        delete payload_.account_var_request_;
      }
      break;
    }
    case kAccountVarResponse: {
      if (GetArena() == nullptr) {
        delete payload_.account_var_response_;
      }
      break;
    }
    case kCmdUseItem: {
      if (GetArena() == nullptr) {
        delete payload_.cmd_use_item_;
      }
      break;
    }
    case kCmdDropItem: {
      if (GetArena() == nullptr) {
        delete payload_.cmd_drop_item_;
      }
      break;
    }
    case kCmdPickupItem: {
      if (GetArena() == nullptr) {
        delete payload_.cmd_pickup_item_;
      }
      break;
    }
    case kCompPosition: {
      if (GetArena() == nullptr) {
        delete payload_.comp_position_;
      }
      break;
    }
    case kCompTemperature: {
      if (GetArena() == nullptr) {
        delete payload_.comp_temperature_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:bestia.messages.Wrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bestia.messages.Auth auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.AccountVarRequest account_var_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_var_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.AccountVarResponse account_var_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_var_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.UseItem cmd_use_item = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_use_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.DropItem cmd_drop_item = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_drop_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.PickupItem cmd_pickup_item = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_pickup_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.PositionComponent comp_position = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_comp_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bestia.messages.TemperatureComponent comp_temperature = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_comp_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bestia.messages.Wrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bestia.messages.Auth auth = 1;
  if (_internal_has_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::auth(this), target, stream);
  }

  // .bestia.messages.AccountVarRequest account_var_request = 2;
  if (_internal_has_account_var_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::account_var_request(this), target, stream);
  }

  // .bestia.messages.AccountVarResponse account_var_response = 3;
  if (_internal_has_account_var_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_var_response(this), target, stream);
  }

  // .bestia.messages.UseItem cmd_use_item = 100;
  if (_internal_has_cmd_use_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::cmd_use_item(this), target, stream);
  }

  // .bestia.messages.DropItem cmd_drop_item = 101;
  if (_internal_has_cmd_drop_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::cmd_drop_item(this), target, stream);
  }

  // .bestia.messages.PickupItem cmd_pickup_item = 102;
  if (_internal_has_cmd_pickup_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::cmd_pickup_item(this), target, stream);
  }

  // .bestia.messages.PositionComponent comp_position = 300;
  if (_internal_has_comp_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::comp_position(this), target, stream);
  }

  // .bestia.messages.TemperatureComponent comp_temperature = 301;
  if (_internal_has_comp_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::comp_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bestia.messages.Wrapper)
  return target;
}

size_t Wrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bestia.messages.Wrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .bestia.messages.Auth auth = 1;
    case kAuth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.auth_);
      break;
    }
    // .bestia.messages.AccountVarRequest account_var_request = 2;
    case kAccountVarRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.account_var_request_);
      break;
    }
    // .bestia.messages.AccountVarResponse account_var_response = 3;
    case kAccountVarResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.account_var_response_);
      break;
    }
    // .bestia.messages.UseItem cmd_use_item = 100;
    case kCmdUseItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.cmd_use_item_);
      break;
    }
    // .bestia.messages.DropItem cmd_drop_item = 101;
    case kCmdDropItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.cmd_drop_item_);
      break;
    }
    // .bestia.messages.PickupItem cmd_pickup_item = 102;
    case kCmdPickupItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.cmd_pickup_item_);
      break;
    }
    // .bestia.messages.PositionComponent comp_position = 300;
    case kCompPosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.comp_position_);
      break;
    }
    // .bestia.messages.TemperatureComponent comp_temperature = 301;
    case kCompTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.comp_temperature_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bestia.messages.Wrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bestia.messages.Wrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bestia.messages.Wrapper)
    MergeFrom(*source);
  }
}

void Wrapper::MergeFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bestia.messages.Wrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kAuth: {
      _internal_mutable_auth()->::bestia::messages::Auth::MergeFrom(from._internal_auth());
      break;
    }
    case kAccountVarRequest: {
      _internal_mutable_account_var_request()->::bestia::messages::AccountVarRequest::MergeFrom(from._internal_account_var_request());
      break;
    }
    case kAccountVarResponse: {
      _internal_mutable_account_var_response()->::bestia::messages::AccountVarResponse::MergeFrom(from._internal_account_var_response());
      break;
    }
    case kCmdUseItem: {
      _internal_mutable_cmd_use_item()->::bestia::messages::UseItem::MergeFrom(from._internal_cmd_use_item());
      break;
    }
    case kCmdDropItem: {
      _internal_mutable_cmd_drop_item()->::bestia::messages::DropItem::MergeFrom(from._internal_cmd_drop_item());
      break;
    }
    case kCmdPickupItem: {
      _internal_mutable_cmd_pickup_item()->::bestia::messages::PickupItem::MergeFrom(from._internal_cmd_pickup_item());
      break;
    }
    case kCompPosition: {
      _internal_mutable_comp_position()->::bestia::messages::PositionComponent::MergeFrom(from._internal_comp_position());
      break;
    }
    case kCompTemperature: {
      _internal_mutable_comp_temperature()->::bestia::messages::TemperatureComponent::MergeFrom(from._internal_comp_temperature());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Wrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bestia.messages.Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bestia.messages.Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrapper::IsInitialized() const {
  return true;
}

void Wrapper::InternalSwap(Wrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace bestia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bestia::messages::Wrapper* Arena::CreateMaybeMessage< ::bestia::messages::Wrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bestia::messages::Wrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
